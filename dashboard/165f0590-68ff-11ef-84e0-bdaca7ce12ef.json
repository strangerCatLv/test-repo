{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "b71791d6-a00a-064b-88d2-59ff2840278b" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "device",
              "name" : null,
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "alarmsCount",
                "type" : "timeseries",
                "label" : "alarmsCount",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5602815622751198
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695019258348,
                  "endTimeMs" : 1695105658348
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\r\n    <div class='content'>\r\n    <img height=\"80px\" id=\"image\"/>\r\n        <audio id=\"sound\">\r\n         <source src=\"https://free-sound-effects.net/mp3/01/free-sound-effects-AA2G40A6.mp3\"  type=\"audio/mpeg\" />\r\n        </audio>\r\n    </div>\r\n</div>\r\n\r\n\r\n<script type=\"text/javascript\" charset=\"utf-8\">\r\n    var card = document.querySelector('.card');\r\n    var image = document.getElementById(\"image\");\r\n    \r\n    if (${alarmsCount} >= 1) {\r\n        document.getElementById(\"sound\").setAttribute(\"autoplay\", true);\r\n        document.getElementById(\"sound\").setAttribute(\"loop\", true);\r\n        image.src = \"https://media.tenor.com/8vSJsVW-1pQAAAAi/police-car-light-joypixels.gif\";\r\n        card.classList.add('blinking-background');\r\n    } else {\r\n        document.getElementById(\"sound\").removeAttribute(\"autoplay\");\r\n        document.getElementById(\"sound\").removeAttribute(\"loop\");\r\n        image.src = \"https://cdn-icons-png.flaticon.com/128/2785/2785693.png\";\r\n        card.classList.remove('blinking-background');\r\n    }\r\n\r\n</script>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 0px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n\n.blinking-background {\n    animation: blink 1s infinite;\n}\n\n@keyframes blink {\n    0% {\n        background-color: red;\n    }\n    50% {\n        background-color: transparent;\n    }\n    100% {\n        background-color: red;\n    }\n}"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "8px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "b71791d6-a00a-064b-88d2-59ff2840278b",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "d73e879c-7eb9-15f7-365f-70966d2ae846" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "device",
              "name" : null,
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "alarmsCount",
                "type" : "timeseries",
                "label" : "alarmsCount",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5602815622751198
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695019258348,
                  "endTimeMs" : 1695105658348
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content'>\n    <img height=\"80px\" id=\"image\"/>\n        <audio id=\"sound\">\n         <source src=\"https://free-sound-effects.net/mp3/01/free-sound-effects-AA2G40A6.mp3\"  type=\"audio/mpeg\" />\n        </audio>\n    </div>\n</div>\n\n\n<script type=\"text/javascript\" charset=\"utf-8\">\n    var image = document.getElementById(\"image\");\n    if (${alarmsCount} >= 1) {\n        document.getElementById(\"sound\").setAttribute(\"autoplay\", ${alarmsCount});\n        document.getElementById(\"sound\").setAttribute(\"loop\", ${alarmsCount});\n        image.src= \"https://media.tenor.com/8vSJsVW-1pQAAAAi/police-car-light-joypixels.gif\";\n    } else {\n        document.getElementById(\"sound\").removeAttribute(\"autoplay\");\n        document.getElementById(\"sound\").removeAttribute(\"loop\");\n        image.src= \"https://cdn-icons-png.flaticon.com/128/2785/2785693.png\";\n    }\n    </script>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 0px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "8px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "d73e879c-7eb9-15f7-365f-70966d2ae846",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "34c4be80-acf4-a20c-3e29-a158425e23c4" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "7ab67317-5908-38e2-96c7-571606959c82",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725350795478,
                  "endTimeMs" : 1725437195478
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Peta Indonesia dengan Polygon</title>\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\r\n    <style>\r\n        #map {\r\n            height: 100vh;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"map\"></div>\r\n\r\n    <script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\r\n    <script>\r\n        // Inisialisasi peta dan atur view ke koordinat Indonesia\r\n        var map = L.map('map').setView([-2.5489, 118.0149], 5);\r\n\r\n        // Tambahkan tile layer dari OpenStreetMap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attribution: '© OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        // Array untuk menyimpan koordinat titik-titik poligon\r\n        var latlngs = [];\r\n\r\n        // Fungsi untuk menambahkan titik ke dalam poligon\r\n        function onMapClick(e) {\r\n            latlngs.push(e.latlng);\r\n            L.marker(e.latlng).addTo(map);\r\n\r\n            // Jika sudah lebih dari dua titik, gambarkan poligon\r\n            if (latlngs.length > 2) {\r\n                if (window.polygon) {\r\n                    map.removeLayer(window.polygon);\r\n                }\r\n                window.polygon = L.polygon(latlngs, {\r\n                    color: 'red'\r\n                }).addTo(map);\r\n            }\r\n        }\r\n\r\n        // Event listener untuk klik peta\r\n        map.on('click', onMapClick);\r\n    </script>\r\n</body>\r\n\r\n</html>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "34c4be80-acf4-a20c-3e29-a158425e23c4"
        },
        "17a7dc98-2a28-c8b5-df64-f968f04da01a" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "7ab67317-5908-38e2-96c7-571606959c82",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725350813991,
                  "endTimeMs" : 1725437213991
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Peta Indonesia dengan Polygon</title>\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\r\n    <style>\r\n        #map {\r\n            height: 100vh;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"map\"></div>\r\n\r\n    <script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\r\n    <script>\r\n        // Inisialisasi peta dan atur view ke koordinat Indonesia\r\n        var map = L.map('map').setView([-2.5489, 118.0149], 5);\r\n\r\n        // Tambahkan tile layer dari OpenStreetMap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attribution: '© OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        // Array untuk menyimpan koordinat titik-titik poligon\r\n        var latlngs = [];\r\n\r\n        // Fungsi untuk menambahkan titik ke dalam poligon\r\n        function onMapClick(e) {\r\n            latlngs.push(e.latlng);\r\n            L.marker(e.latlng).addTo(map);\r\n\r\n            // Jika sudah lebih dari dua titik, gambarkan poligon\r\n            if (latlngs.length > 2) {\r\n                if (window.polygon) {\r\n                    map.removeLayer(window.polygon);\r\n                }\r\n                window.polygon = L.polygon(latlngs, {\r\n                    color: 'red'\r\n                }).addTo(map);\r\n            }\r\n        }\r\n\r\n        // Event listener untuk klik peta\r\n        map.on('click', onMapClick);\r\n    </script>\r\n</body>\r\n\r\n</html>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "17a7dc98-2a28-c8b5-df64-f968f04da01a"
        },
        "c77e1b32-236d-7c36-7df3-56d7ae60004f" : {
          "typeFullFqn" : "tenant.custom_maintenance_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "5de80941-5632-bc32-b1de-27189693bd91",
              "dataKeys" : [ {
                "name" : "maintenances",
                "type" : "attribute",
                "label" : "maintenances",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5666886625936747
              }, {
                "name" : "demo_km",
                "type" : "timeseries",
                "label" : "demo_km",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.5623678034438926
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1713668820289,
                  "endTimeMs" : 1713755220289
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : true,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "Maintenance Table",
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "enableDataExport" : true,
            "widgetStyle" : { },
            "widgetCss" : "",
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "actions" : {
              "headerButton" : [ {
                "name" : "Edit Maintenances",
                "icon" : "mdi:wrench-clock",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editMaintenanceForm=\"ngForm\"\n    [formGroup]=\"editMaintenanceFormGroup\"\n    (ngSubmit)=\"save()\" class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit Maintenance Items</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\"\n            type=\"button\">\n            <mat-icon\n                class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\"\n        *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\">\n    </div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\"\n            fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Vehicle Name</mat-label>\n                <input matInput formControlName=\"entityName\"\n                    readonly />\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Type</mat-label>\n                <input matInput formControlName=\"type\"\n                    readonly />\n            </mat-form-field>\n        </div>\n        <!--<button mat-raised-button color=\"primary\"-->\n        <!--        type=\"button\"-->\n        <!--        (click)=\"showMaintenanceKeys()\"-->\n        <!--        matTooltip=\"Patch Maintenance Key\"-->\n        <!--        matTooltipPosition=\"above\">-->\n        <!--    Test-->\n        <!--</button>-->\n        <div formGroupName=\"attributes\">\n            <div formArrayName=\"maintenances\">\n                <div class=\"mat-body-1\" style=\"color: rgba(0,0,0,0.57);\">Maintenance List</div>\n                <div fxLayout=\"row\" fxLayoutGap=\"3px\"\n                    fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\"\n                    *ngFor=\"maintenanceItem of maintenanceArray().controls; let i = index\">\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"center start\" style=\"padding: 10px 0 0px 5px;\">\n                        <mat-form-field fxFlex>\n                            <mat-label\n                                for=\"mtc_name{{i}}\">Name</mat-label>\n                            <input type=\"text\" matInput\n                                id=\"mtc_name{{i}}\"\n                                formControlName=\"mtc_name\" readonly>\n                        </mat-form-field>\n                        <mat-form-field fxFlex>\n                            <mat-label for=\"mtc_key{{i}}\">Telemetry\n                                Key</mat-label>\n                            <input type=\"text\" matInput\n                                id=\"mtc_key{{i}}\"\n                                formControlName=\"mtc_key\" readonly>\n                        </mat-form-field>\n                        <mat-form-field fxFlex>\n                            <mat-label for=\"mtc_last_km{{i}}\">Last\n                                KM</mat-label>\n                            <input type=\"number\" matInput\n                                id=\"mtc_last_km{{i}}\"\n                                formControlName=\"mtc_last_km\"\n                                readonly>\n                        </mat-form-field>\n                        <mat-form-field fxFlex>\n                            <mat-label for=\"mtc_km_th{{i}}\">KM\n                                Threshold</mat-label>\n                            <input type=\"number\" matInput\n                                id=\"mtc_km_th{{i}}\"\n                                formControlName=\"mtc_km_th\"\n                                readonly>\n                        </mat-form-field>\n                        <button mat-icon-button color=\"primary\"\n                            aria-label=\"Remove\"\n                            type=\"button\"\n                            (click)=\"removeOldMaintenance(i)\"\n                            matTooltip=\"Remove maintenance\"\n                            matTooltipPosition=\"above\">\n                            <mat-icon>close</mat-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"maintenance-list\">\n            <div class=\"mat-body-1\" style=\"color: rgba(0,0,0,0.57);\">New Maintenance</div>\n            <div class=\"body\" [fxShow]=\"newMaintenances().length\">\n                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"newMaintenances\" *ngFor=\"let newMaintenance of newMaintenances().controls; let j = index\">\n                    <div [formGroupName]=\"j\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">\n                        <mat-form-field fxFlex>\n                            <mat-label\n                                for=\"new_mtc_name{{j}}\">Name</mat-label>\n                            <input type=\"text\" matInput\n                                id=\"new_mtc_name{{j}}\"\n                                formControlName=\"mtc_name\"\n                                [required]=\"true\">\n                            <mat-error *ngIf=\"newMaintenances().controls[j].get('mtc_name').hasError('required')\">\n                            Maintenance name is required.\n                            </mat-error>\n                        </mat-form-field>\n                        <mat-form-field fxFlex>\n                            <mat-label for=\"new_mtc_key{{j}}\">Telemetry\n                                Key</mat-label>\n                            <input type=\"text\" matInput\n                                id=\"new_mtc_key{{j}}\"\n                                formControlName=\"mtc_key\"\n                                [required]=\"true\">\n                            <mat-error *ngIf=\"newMaintenances().controls[j].get('mtc_key').hasError('required')\">\n                            Telemetry key is required.\n                            </mat-error>\n                            <!--<mat-error *ngIf=\"maintenanceArray().controls[i].get('mtc_key').hasError('forbiddenKey')\">-->\n                            <!--Telemetry key is forbidden.-->\n                            <!--</mat-error>-->\n                        </mat-form-field>\n                        <mat-form-field fxFlex>\n                            <mat-label for=\"new_mtc_last_km{{j}}\">Last\n                                KM</mat-label>\n                            <input type=\"number\" matInput\n                                id=\"new_mtc_last_km{{j}}\"\n                                formControlName=\"mtc_last_km\"\n                                [required]=\"true\">\n                            <mat-error *ngIf=\"newMaintenances().controls[j].get('mtc_last_km').hasError('required')\">\n                            Last kilometer is required.\n                            </mat-error>\n                        </mat-form-field>\n                        <mat-form-field fxFlex>\n                            <mat-label for=\"new_mtc_km_th{{j}}\">KM\n                                Threshold</mat-label>\n                            <input type=\"number\" matInput\n                                id=\"new_mtc_km_th{{j}}\"\n                                formControlName=\"mtc_km_th\"\n                                [required]=\"true\">\n                            <mat-error *ngIf=\"newMaintenances().controls[j].get('mtc_km_th').hasError('required')\">\n                            KM threshold is required.\n                            </mat-error>\n                        </mat-form-field>\n                        <button mat-icon-button color=\"primary\"\n                            aria-label=\"Remove\"\n                            type=\"button\"\n                            (click)=\"removeNewMaintenance(j)\"\n                            matTooltip=\"Remove maintenance\"\n                            matTooltipPosition=\"above\">\n                            <mat-icon>close</mat-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div>\n               <button mat-raised-button color=\"primary\"\n                       type=\"button\"\n                       (click)=\"addMaintenance()\"\n                       matTooltip=\"Add Maintenance\"\n                       matTooltipPosition=\"above\">\n                   Add\n               </button>\n           </div>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n       <button mat-button color=\"primary\"\n               type=\"button\"\n               [disabled]=\"(isLoading$ | async)\"\n               (click)=\"cancel()\" cdkFocusInitial>\n           Cancel\n       </button>\n       <button mat-button mat-raised-button color=\"primary\"\n               type=\"submit\"\n               [disabled]=\"(isLoading$ | async) || editMaintenanceFormGroup.invalid || !editMaintenanceFormGroup.dirty\">\n           Save\n       </button>\n   </div>\n</form>",
                "customCss" : ".edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.maintenance-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.maintenance-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.maintenance-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.maintenance-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.maintenance-list .body .row {\n    padding-top: 5px;\n}\n\n.maintenance-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.maintenance-list .body .md-button {\n    margin: 0;\n}\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditMaintenanceDialog();\n\nfunction openEditMaintenanceDialog(){\n    customDialog.customDialog(htmlTemplate, EditMaintenanceDialogController).subscribe();\n}\n\nfunction EditMaintenanceDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.entity = {};\n    vm.attributes = {};\n    vm.maintenances = [];\n    vm.maintenanceToDelete = [];\n    vm.maintenanceKeys = [];\n    let currentKey = '';\n    \n    vm.editMaintenanceFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityType: [null],\n        entityLabel: [null],\n        type: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            maintenances: vm.fb.array([])\n        }),\n        newMaintenances: vm.fb.array([])\n    });\n    \n    getEntityInfo();\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.save = function() {\n        vm.editMaintenanceFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            if(attributes[i].key == \"maintenances\") {\n                vm.attributes[attributes[i].key] = attributes[i].value;\n            }\n        }\n        \n        if (vm.attributes.hasOwnProperty('maintenances')) {\n            vm.maintenances = vm.attributes.maintenances;\n            vm.maintenances.forEach((item, index) => {\n                item[\"prevIndex\"] = index;\n            });\n            vm.maintenanceKeys = [];\n            vm.maintenanceKeys = vm.attributes.maintenances.map(item => item.mtc_key);\n            // edit 22/04/2024\n            addMaintenanceControl();\n            patchMaintenanceArray(vm.attributes.maintenances);\n        }\n        // console.log(vm.maintenanceKeys);\n    }\n    \n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n            entityService.getEntity(entityId.entityType, entityId.id)\n        ]).subscribe(\n            function (data) {\n                getEntityAttributes(data[0]);\n                vm.entity = data[1];\n                vm.editMaintenanceFormGroup.patchValue({\n                    entityName: vm.entity.name,\n                    entityType: vm.entityType,\n                    entityLabel: vm.entity.label,\n                    type: vm.entity.type,\n                }, {emitEvent: false});\n            }\n        );\n    }\n    \n    vm.removeOldMaintenance = function(index) {\n        vm.maintenanceArray().removeAt(index);\n        vm.maintenanceToDelete.push(index);\n        vm.maintenanceArray().markAsDirty(index);\n    };\n    \n    vm.removeNewMaintenance = function(index) {\n        vm.newMaintenances().removeAt(index);\n        vm.newMaintenances().markAsDirty(index);\n    };\n    \n    vm.maintenanceArray = function() {\n        return vm.editMaintenanceFormGroup.get('attributes').get('maintenances');\n    };\n    \n    vm.newMaintenances = function() {\n        return vm.editMaintenanceFormGroup.get('newMaintenances');\n    };\n    \n    vm.addMaintenance = function() {\n      vm.newMaintenances().push(vm.fb.group({\n          mtc_name: [null, [vm.validators.required]],\n          mtc_key: [null, [vm.validators.required]],\n          mtc_last_km: [null, [vm.validators.required]],\n          mtc_km_th: [null, [vm.validators.required]]\n      }));\n    };\n    \n    vm.forbiddenKeyValidator = function(existingKey, indexField) {\n        return function(control) {\n            // console.log(existingKey);\n            // console.log(control.value);\n            // console.log(control.parent);\n            if (!existingKey) {\n                return null;\n            }\n            const value = control.value;\n            let isUnique = true;\n            const prevIndex = control.parent ? control.parent.get(indexField).value : null;\n            if (prevIndex != null) {\n                const maintenanceItem = existingKey.find(item => item.prevIndex === prevIndex);\n                const oldMtcKey = maintenanceItem.mtc_key;\n                if (value == oldMtcKey || existingKey.every(key => key !== currentValue)) {\n                    isUnique = false;\n                }\n            }\n            return isUnique ? null : {forbiddenKey: true};\n        };\n    };\n\n    \n    function addMaintenanceControl() {\n        const maintenanceArray = vm.maintenanceArray();\n        const maintenances = vm.maintenances;\n        const forbiddenUniqueKeyValidator = vm.forbiddenKeyValidator(maintenances, 'prevIndex');\n        maintenanceArray.push(vm.fb.group({\n            prevIndex: [null],\n            mtc_name:['', [vm.validators.required]],\n            mtc_key: ['', [forbiddenUniqueKeyValidator, vm.validators.required]],\n            mtc_last_km: [null, [vm.validators.required]],\n            mtc_km_th:[null, [vm.validators.required]]\n        }));\n        \n    }\n    \n    function patchMaintenanceArray(maintenanceData) {\n        const maintenanceArray = vm.maintenanceArray();\n        maintenanceArray.clear();\n    \n        maintenanceData.forEach((maintenanceItem, index) => {\n          maintenanceArray.push(vm.fb.group({\n            prevIndex: index,\n            mtc_name: maintenanceItem.mtc_name,\n            mtc_key: maintenanceItem.mtc_key,\n            mtc_last_km: maintenanceItem.mtc_last_km,\n            mtc_km_th: maintenanceItem.mtc_km_th\n          }));\n        });\n    }\n    \n    vm.showMaintenanceKeys = function() {\n        console.log(vm.editMaintenanceFormGroup.get('attributes').get('maintenances'));\n        console.log(vm.maintenances);\n    };\n    \n    vm.showValueChange = function(index) {\n        let currentValue = vm.maintenanceArray().controls[index].value;\n        console.log({existing: currentValue});\n        vm.maintenanceArray().controls[index].valueChanges.subscribe(newValue => {\n            console.log({newvalue: newValue});\n        });\n    };\n    \n\n    function saveAttributes(entityId) {\n        let attributes = vm.editMaintenanceFormGroup.get('attributes').value;\n        // var maintenances = [];\n        if(!attributes.hasOwnProperty('maintenances')) {\n            attributes.maintenances = [];\n        }\n        const newMaintenancesFinal = vm.newMaintenances();\n        \n        newMaintenancesFinal.value.forEach(newMaintenanceItem => {\n            attributes.maintenances.push(newMaintenanceItem);\n        });\n        \n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n    \n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "d9cc51a2-f735-0732-2dee-e7441e966e4a"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "c77e1b32-236d-7c36-7df3-56d7ae60004f"
        }
      },
      "states" : {
        "default" : {
          "name" : "test",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "b71791d6-a00a-064b-88d2-59ff2840278b" : {
                  "sizeX" : 8,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 0
                },
                "d73e879c-7eb9-15f7-365f-70966d2ae846" : {
                  "sizeX" : 8,
                  "sizeY" : 2,
                  "row" : 2,
                  "col" : 2
                },
                "34c4be80-acf4-a20c-3e29-a158425e23c4" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 4,
                  "col" : 0
                },
                "17a7dc98-2a28-c8b5-df64-f968f04da01a" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 4,
                  "col" : 7
                },
                "c77e1b32-236d-7c36-7df3-56d7ae60004f" : {
                  "sizeX" : 24,
                  "sizeY" : 5,
                  "row" : 7,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "7ab67317-5908-38e2-96c7-571606959c82" : {
          "id" : "7ab67317-5908-38e2-96c7-571606959c82",
          "alias" : "Asset Devices",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : "selectedAsset",
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "deviceTypes" : [ "Sonoff", "Temperature", "sensor smoke", "PUSH BUTTON" ]
          }
        },
        "5de80941-5632-bc32-b1de-27189693bd91" : {
          "id" : "5de80941-5632-bc32-b1de-27189693bd91",
          "alias" : "current device",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1725176627625,
            "endTimeMs" : 1725263027625
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "165f0590-68ff-11ef-84e0-bdaca7ce12ef"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "test",
    "ownerId" : null,
    "title" : "test"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}