{
  "entityType" : "DASHBOARD",
  "entity" : {
    "title" : "test",
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "b71791d6-a00a-064b-88d2-59ff2840278b" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "device",
              "name" : null,
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "alarmsCount",
                "type" : "timeseries",
                "label" : "alarmsCount",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5602815622751198
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695019258348,
                  "endTimeMs" : 1695105658348
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\r\n    <div class='content'>\r\n    <img height=\"80px\" id=\"image\"/>\r\n        <audio id=\"sound\">\r\n         <source src=\"https://free-sound-effects.net/mp3/01/free-sound-effects-AA2G40A6.mp3\"  type=\"audio/mpeg\" />\r\n        </audio>\r\n    </div>\r\n</div>\r\n\r\n\r\n<script type=\"text/javascript\" charset=\"utf-8\">\r\n    var card = document.querySelector('.card');\r\n    var image = document.getElementById(\"image\");\r\n    \r\n    if (${alarmsCount} >= 1) {\r\n        document.getElementById(\"sound\").setAttribute(\"autoplay\", true);\r\n        document.getElementById(\"sound\").setAttribute(\"loop\", true);\r\n        image.src = \"https://media.tenor.com/8vSJsVW-1pQAAAAi/police-car-light-joypixels.gif\";\r\n        card.classList.add('blinking-background');\r\n    } else {\r\n        document.getElementById(\"sound\").removeAttribute(\"autoplay\");\r\n        document.getElementById(\"sound\").removeAttribute(\"loop\");\r\n        image.src = \"https://cdn-icons-png.flaticon.com/128/2785/2785693.png\";\r\n        card.classList.remove('blinking-background');\r\n    }\r\n\r\n</script>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 0px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n\n.blinking-background {\n    animation: blink 1s infinite;\n}\n\n@keyframes blink {\n    0% {\n        background-color: red;\n    }\n    50% {\n        background-color: transparent;\n    }\n    100% {\n        background-color: red;\n    }\n}"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "8px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "b71791d6-a00a-064b-88d2-59ff2840278b",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "d73e879c-7eb9-15f7-365f-70966d2ae846" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "device",
              "name" : null,
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "alarmsCount",
                "type" : "timeseries",
                "label" : "alarmsCount",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5602815622751198
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695019258348,
                  "endTimeMs" : 1695105658348
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content'>\n    <img height=\"80px\" id=\"image\"/>\n        <audio id=\"sound\">\n         <source src=\"https://free-sound-effects.net/mp3/01/free-sound-effects-AA2G40A6.mp3\"  type=\"audio/mpeg\" />\n        </audio>\n    </div>\n</div>\n\n\n<script type=\"text/javascript\" charset=\"utf-8\">\n    var image = document.getElementById(\"image\");\n    if (${alarmsCount} >= 1) {\n        document.getElementById(\"sound\").setAttribute(\"autoplay\", ${alarmsCount});\n        document.getElementById(\"sound\").setAttribute(\"loop\", ${alarmsCount});\n        image.src= \"https://media.tenor.com/8vSJsVW-1pQAAAAi/police-car-light-joypixels.gif\";\n    } else {\n        document.getElementById(\"sound\").removeAttribute(\"autoplay\");\n        document.getElementById(\"sound\").removeAttribute(\"loop\");\n        image.src= \"https://cdn-icons-png.flaticon.com/128/2785/2785693.png\";\n    }\n    </script>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 0px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "8px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "d73e879c-7eb9-15f7-365f-70966d2ae846",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "34c4be80-acf4-a20c-3e29-a158425e23c4" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "7ab67317-5908-38e2-96c7-571606959c82",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725350795478,
                  "endTimeMs" : 1725437195478
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Peta Indonesia dengan Polygon</title>\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\r\n    <style>\r\n        #map {\r\n            height: 100vh;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"map\"></div>\r\n\r\n    <script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\r\n    <script>\r\n        // Inisialisasi peta dan atur view ke koordinat Indonesia\r\n        var map = L.map('map').setView([-2.5489, 118.0149], 5);\r\n\r\n        // Tambahkan tile layer dari OpenStreetMap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attribution: '© OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        // Array untuk menyimpan koordinat titik-titik poligon\r\n        var latlngs = [];\r\n\r\n        // Fungsi untuk menambahkan titik ke dalam poligon\r\n        function onMapClick(e) {\r\n            latlngs.push(e.latlng);\r\n            L.marker(e.latlng).addTo(map);\r\n\r\n            // Jika sudah lebih dari dua titik, gambarkan poligon\r\n            if (latlngs.length > 2) {\r\n                if (window.polygon) {\r\n                    map.removeLayer(window.polygon);\r\n                }\r\n                window.polygon = L.polygon(latlngs, {\r\n                    color: 'red'\r\n                }).addTo(map);\r\n            }\r\n        }\r\n\r\n        // Event listener untuk klik peta\r\n        map.on('click', onMapClick);\r\n    </script>\r\n</body>\r\n\r\n</html>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "34c4be80-acf4-a20c-3e29-a158425e23c4"
        },
        "17a7dc98-2a28-c8b5-df64-f968f04da01a" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "7ab67317-5908-38e2-96c7-571606959c82",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725350813991,
                  "endTimeMs" : 1725437213991
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Peta Indonesia dengan Polygon</title>\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\r\n    <style>\r\n        #map {\r\n            height: 100vh;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"map\"></div>\r\n\r\n    <script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\r\n    <script>\r\n        // Inisialisasi peta dan atur view ke koordinat Indonesia\r\n        var map = L.map('map').setView([-2.5489, 118.0149], 5);\r\n\r\n        // Tambahkan tile layer dari OpenStreetMap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attribution: '© OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        // Array untuk menyimpan koordinat titik-titik poligon\r\n        var latlngs = [];\r\n\r\n        // Fungsi untuk menambahkan titik ke dalam poligon\r\n        function onMapClick(e) {\r\n            latlngs.push(e.latlng);\r\n            L.marker(e.latlng).addTo(map);\r\n\r\n            // Jika sudah lebih dari dua titik, gambarkan poligon\r\n            if (latlngs.length > 2) {\r\n                if (window.polygon) {\r\n                    map.removeLayer(window.polygon);\r\n                }\r\n                window.polygon = L.polygon(latlngs, {\r\n                    color: 'red'\r\n                }).addTo(map);\r\n            }\r\n        }\r\n\r\n        // Event listener untuk klik peta\r\n        map.on('click', onMapClick);\r\n    </script>\r\n</body>\r\n\r\n</html>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "17a7dc98-2a28-c8b5-df64-f968f04da01a"
        },
        "06468f99-78fe-181e-8bfa-814e13b03948" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725351738141,
                  "endTimeMs" : 1725438138141
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "device",
              "name" : "",
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.516845129489915
              }, {
                "name" : "latitude1",
                "type" : "attribute",
                "label" : "latitude1",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.971117531722524
              }, {
                "name" : "longitude1",
                "type" : "attribute",
                "label" : "longitude1",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.439661135820947
              }, {
                "name" : "perimeter",
                "type" : "attribute",
                "label" : "perimeter",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.42589973149198523
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "rowClick" : [ ],
              "actionCellButton" : [ {
                "name" : "set",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\" class=\"edit-entity-form\">\n    <mat-toolbar color=\"primary\">\n        <h2>Edit sensor {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>Sensor name</mat-label>\n            <input matInput formControlName=\"entityName\" readonly>\n        </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Latitude 1</mat-label>\n                <input type=\"number\" step=\"0.1\" matInput\n                       formControlName=\"latitude1\">\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Longitude 2</mat-label>\n                <input type=\"number\" step=\"0.1\" matInput\n                       formControlName=\"longitude1\">\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Perimeter</mat-label>\n                <input type=\"text\" step=\"0.1\" matInput\n                       formControlName=\"perimeter\">\n            </mat-form-field>\n    </div>\n    <div mat-dialog-actions fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : ".edit-entity-form{\n    width: 300px;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityId = entityId;\n    vm.entityName = entityName;\n    vm.attributes = {};\n    vm.latitude1 = null;\n    vm.longitude1 = null;\n    \n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: [''],\n        attributes: vm.fb.group({\n            latitude1: [null],\n            longitude1: [null],\n            perimeter : [null]\n        })\n    });\n    \n    getEntityInfo();\n    \n    \n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        saveAttributes(entityId).subscribe(\n            function () {\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n    \n    function getEntityInfo() {\n        attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE').subscribe(\n            function (attributes) {\n                getEntityAttributes(attributes);\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entityName,\n                    attributes: vm.attributes\n                });\n            }\n        );\n    }\n    \n   function saveAttributes(entityId) {\n        let latitude1 = vm.editFieldFormGroup.get('latitude1').value;\n        let longitude1 = vm.editFieldFormGroup.get('longitude1').value;\n        let attributesArray = [\n            {key: 'latitude', value: latitude1},\n            {key: 'longitude', value: longitude1},\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "cf111bbc-c598-e132-efe8-31973046b5cd"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "06468f99-78fe-181e-8bfa-814e13b03948"
        },
        "dc341b1e-48f7-b44b-33a8-56237ce00beb" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1667907617961,
                  "endTimeMs" : 1667994017961
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "entitiesTitle" : "Fields",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "Name",
              "useRowStyleFunction" : false
            },
            "title" : "New Entities table",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "b6b7bd3f-ccb6-c3dd-b417-9b274278a4e3",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "30%",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7231686834210371,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "label",
                "type" : "entityField",
                "label" : "Label",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "30%",
                  "useCellStyleFunction" : true,
                  "cellStyleFunction" : "return {\n    fontWeight: 600\n};",
                  "useCellContentFunction" : true,
                  "cellContentFunction" : "return value ? '<span style=\"background: rgba(111, 116, 242, 0.08); border-radius: 16px; padding: 4px 8px; color: #5553AF;\">'+value+'</span>' : '';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7427597097428846,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "cropType",
                "type" : "attribute",
                "label" : "Crop type",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "20%",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.45735173845667054,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "avgMoisture",
                "type" : "timeseries",
                "label" : "Average moisture",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "20%",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : true,
                  "cellContentFunction" : "if (value) {\n    var minMoistureThreshold = entity['minMoistureThreshold'];\n    var maxMoistureThreshold = entity['maxMoistureThreshold'];\n    var background = '111, 116, 242';\n    var textColor = '#5553AF';\n    if (value < minMoistureThreshold || value > maxMoistureThreshold) {\n        background = '209, 39, 48';\n        textColor = '#D12730';\n    }\n    var percent = value + '%';\n    var percentText = value.toFixed(0) + '%';\n    return '<div style=\"width: 100%; max-width: 100px; height: 16px; background: linear-gradient(to right, rgba('+background+', 0.16) '+percent+', rgba('+background+', 0.08) '+percent+'); border-radius: 5.21053px; line-height: normal;\"><span style=\"padding-left: 4px; font-weight: 600; font-size: 13px; color: '+textColor+';\">'+percentText+'</span></div>';\n} else {\n    return 'No data';\n}",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.017767185128356955,
                "aggregationType" : "NONE",
                "units" : "%",
                "decimals" : 0,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "minMoistureThreshold",
                "type" : "attribute",
                "label" : "minMoistureThreshold",
                "color" : "#8bc34a",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.5565658823011432,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "maxMoistureThreshold",
                "type" : "attribute",
                "label" : "maxMoistureThreshold",
                "color" : "#3f51b5",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.860782325530304,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "irrigationState",
                "type" : "timeseries",
                "label" : "Irrigation",
                "color" : "#8bc34a",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : true,
                  "cellContentFunction" : "var text = value === 'ON' ? 'On' : 'Off';\nvar color = value === 'ON' ? '#198038' : 'red';\nreturn '<div><span style=\"width: 4px; height: 4px; border-radius: 2px; background: '+color+'; display: inline-block; vertical-align: middle;\"></span><span style=\"padding-left: 8px;\">'+text+'</span></div>';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.20197437452090683,
                "aggregationType" : "NONE",
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "displayTimewindow" : true,
            "actions" : {
              "rowClick" : [ {
                "name" : "Field details",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "field",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9fac49b3-0e6b-9beb-56a7-6da9cec34984"
              } ],
              "headerButton" : [ {
                "name" : "Create field",
                "icon" : "add",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addFieldForm=\"ngForm\" [formGroup]=\"addFieldFormGroup\"\n      (ngSubmit)=\"submit()\" class=\"sf-field-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>{{ step === 1 ? 'Add field' : 'Setup field polygon' }}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <section *ngIf=\"step === 1\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Field Name</mat-label>\n                    <input matInput formControlName=\"name\" required>\n                    <mat-error *ngIf=\"addFieldFormGroup.get('name').hasError('required')\">\n                        Field name is required.\n                    </mat-error>\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Label</mat-label>\n                    <input matInput formControlName=\"label\">\n                </mat-form-field>\n            </div>\n            <mat-form-field appearance=\"fill\">\n              <mat-label>Crop type</mat-label>\n              <mat-select matInput formControlName=\"cropType\" required panelClass=\"sf-field-form\">\n                <mat-option *ngFor=\"let cropType of cropTypes\" [value]=\"cropType\">\n                  {{ cropType }}\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"addFieldFormGroup.get('cropType').hasError('required')\">\n                    Crop type is required.\n              </mat-error>\n            </mat-form-field>\n            <span class=\"title-modal\" style=\"padding-left: 8px;\">Moisture thresholds</span>\n            <div fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"padding: 0 8px;\">\n                    <label class=\"tb-small\">Min</label>\n                    <label class=\"tb-small threshold-value\">{{ addFieldFormGroup.get('minMoistureThreshold').value }}%</label>\n                </div>\n                <mat-slider\n                    color=\"primary\"\n                    discrete\n                    [displayWith]=\"formatMoistureThreshold\"\n                    tickInterval=\"auto\"\n                    step=\"1\"\n                    min=\"0\"\n                    max=\"100\"\n                    aria-label=\"Minimum moisture threshold\"><input matSliderThumb formControlName=\"minMoistureThreshold\"/>\n                </mat-slider>\n            </div>    \n            <div fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"padding: 0 8px;\">\n                    <label class=\"tb-small\">Max</label>\n                    <label class=\"tb-small threshold-value\">{{ addFieldFormGroup.get('maxMoistureThreshold').value }}%</label>\n                </div>\n                <mat-slider\n                    color=\"primary\"\n                    discrete\n                    [displayWith]=\"formatMoistureThreshold\"\n                    tickInterval=\"auto\"\n                    step=\"1\"\n                    min=\"0\"\n                    max=\"100\"\n                    aria-label=\"Maximum moisture threshold\"><input matSliderThumb formControlName=\"maxMoistureThreshold\"/>\n                </mat-slider>\n            </div>    \n        </section>\n        <section *ngIf=\"step === 2\" fxLayout=\"column\">\n            <tb-dashboard-state \n                style=\"height: 600px; width: 100%;\"\n                [ctx]=\"widgetContext\"\n                stateId=\"setup_field_polygon\"\n                [entityId]=\"field.id\">\n            </tb-dashboard-state>\n        </section>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button *ngIf=\"step === 1\" mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button *ngIf=\"step === 1\" mat-button mat-raised-button color=\"primary\"\n                type=\"button\"\n                (click)=\"next()\"\n                [disabled]=\"(isLoading$ | async) || addFieldFormGroup.invalid\">\n            Next\n        </button>\n        <button *ngIf=\"step === 2\" mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"back()\" cdkFocusInitial>\n            Back\n        </button>\n        <button *ngIf=\"step === 2\" mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || addFieldFormGroup.invalid || !hasPolygon\">\n            Create\n        </button>\n    </div>\n</form>\n",
                "customCss" : ".sf-field-form {\n    width: 800px;\n}\n\n.sf-field-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-field-form .mat-mdc-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-field-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-field-form .mat-datetimepicker-clock-center, .sf-field-form .mat-datetimepicker-clock-hand, .sf-field-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard, .sf-field-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-field-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-field-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-field-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-field-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-field-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator,\n.sf-field-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .threshold-value {\n    color: #fff;\n    font-weight: 500;\n    background: #6F74F2;\n    border-radius: 16px;\n    width: 32px;\n    height: 32px;\n    line-height: 32px;\n    text-align: center;\n}\n\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAddFieldDialog();\n\nfunction openAddFieldDialog() {\n    customDialog.customDialog(htmlTemplate, AddFieldDialogController).subscribe();\n}\n\nfunction AddFieldDialogController(instance) {\n    let vm = instance;\n    \n    vm.cropTypes = ['rice', 'corn', 'wheat', \n    'sugarcane', 'maize (corn)', 'soybean oil', 'palm oil', 'potatoes',\n    'cassava', 'legume pulses', 'sunflower seed oil', 'rape and mustard oil',\n    'other vegetables', 'other fruits', 'sorghum', 'millet', 'groundnuts', 'beans',\n    'sweet potatoes', 'bananas', 'various nuts', 'soybeans', 'cottonseed oil',\n    'groundnut oil', 'yams'];\n    \n    vm.widgetContext = widgetContext;\n    vm.step = 1;\n    vm.field = null;\n    \n    vm.hasPolygon = false;\n    vm.polygonSubscription = null;\n\n\n    vm.addFieldFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      label: [null],\n      cropType: ['wheat', [vm.validators.required]],\n      minMoistureThreshold: [25, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]],\n      maxMoistureThreshold: [75, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]]\n    });\n\n    vm.cancel = function() {\n        cancelPolygonSubscription();\n        deleteEntityObservable().subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.next = function() {\n        vm.addFieldFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                vm.field = entity;\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(entity.id),\n                ]).subscribe(\n                    function () {\n                        createPolygonSubscription().subscribe(\n                            function() {\n                                vm.step = 2;\n                            }\n                        );\n                    }\n                );\n            }\n        );\n    };\n    \n    vm.back = function() {\n        cancelPolygonSubscription();\n        vm.step = 1;\n    }\n    \n    vm.submit = function() {\n        cancelPolygonSubscription();\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n    }\n    \n    vm.formatMoistureThreshold = function(value) {\n        return value + '%';\n    }\n    \n    function createPolygonSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.field.id.entityType,\n            entityId: vm.field.id.id,\n            attributes: [{ name: 'perimeter' }]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkHasPolygon(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(polygonSubscription) {\n                vm.polygonSubscription = polygonSubscription;\n            })\n        );\n        \n    }\n    \n    function checkHasPolygon(data) {\n        var datasourceData = data[0].data;\n        var keyData = datasourceData[0];\n        var value = keyData[1];\n        if (value && Array.isArray(JSON.parse(value))) {\n            vm.hasPolygon = true;\n        } else {\n            vm.hasPolygon = false;\n        }\n    }\n    \n    function cancelPolygonSubscription() {\n        if (vm.polygonSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.polygonSubscription.id);\n            vm.polygonSubscription = null;\n        }\n    }\n\n    function saveEntityObservable() {\n        return getOrCreateSmartIrrigationAssetGroup().pipe(\n          widgetContext.rxjs.switchMap((smartIrrigation) => {\n            const formValues = vm.addFieldFormGroup.value;\n            let field = {\n                name: formValues.name,\n                type: 'SI Field',\n                label: formValues.label\n            };\n            if (vm.field) {\n                field.id = vm.field.id;\n            }\n            return assetService.saveAsset(field, smartIrrigation.id.id);\n          })\n        );\n    }\n    \n    function deleteEntityObservable() {\n        if (vm.field) {\n            return assetService.deleteAsset(vm.field.id.id);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n\n    function saveAttributes(entityId) {\n        let cropType = vm.addFieldFormGroup.get('cropType').value;\n        let minMoistureThreshold = vm.addFieldFormGroup.get('minMoistureThreshold').value;\n        let maxMoistureThreshold = vm.addFieldFormGroup.get('maxMoistureThreshold').value;\n        let attributesArray = [\n            {key: 'cropType', value: cropType},\n            {key: 'minMoistureThreshold', value: minMoistureThreshold},\n            {key: 'maxMoistureThreshold', value: maxMoistureThreshold}\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function getOrCreateSmartIrrigationAssetGroup() {\n      return getEntityGroupByName(\"Smart Irrigation\", \"ASSET\").pipe(\n          widgetContext.rxjs.switchMap((group) => {\n              if (group) {\n                  return widgetContext.rxjs.of(group);\n              } else {\n                  var smartIrrigation = {\n                    type: 'ASSET',\n                    name: 'Smart Irrigation'\n                  };\n                  return entityGroupService.saveEntityGroup(smartIrrigation);\n              }\n          })\n      );\n    }\n    \n    function getEntityGroupByName(groupName, groupType) {\n      var entityGroupsPageLink = widgetContext.pageLink(10, 0, groupName);\n      return entityGroupService.getEntityGroupsByPageLink(entityGroupsPageLink, groupType, {ignoreLoading: true}).pipe(\n          widgetContext.rxjs.map((data) => {\n            if (data.data.length) {\n                return data.data.find((group) => group.name === groupName);\n            } else {\n                return null;\n            }\n          })\n      );\n    }\n\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "5b9d0130-b8ab-4103-0223-90a4530d425f"
              } ],
              "actionCellButton" : [ {
                "name" : "Edit field",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "setup_field_polygon",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "popoverPreferredPlacement" : "top",
                "popoverHideOnClickOutside" : true,
                "popoverHideDashboardToolbar" : true,
                "popoverWidth" : "500px",
                "popoverHeight" : "500px",
                "popoverStyle" : { },
                "openInSeparateDialog" : false,
                "openInPopover" : true,
                "id" : "440ca790-1b01-c774-c4f9-065a2aaa2dce"
              }, {
                "name" : "Delete field",
                "icon" : "delete",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "",
                "customCss" : ".sf-field-delete-dialog .mat-mdc-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-icon-button.mat-primary, .sf-field-delete-dialog .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-delete-dialog .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete field \\'' +\n                 entityName + '\\'';\n    let content = 'Are you sure you want to delete the field \\'' + entityName + '\\'?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n    $('tb-confirm-dialog').addClass('sf-field-delete-dialog');\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return assetService.deleteAsset(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the field. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "76de68f0-6177-7d13-0fb7-5af0f56b25dc"
              } ]
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "enableDataExport" : false,
            "widgetStyle" : { },
            "widgetCss" : "mat-row {\n    cursor: pointer;\n}",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "dc341b1e-48f7-b44b-33a8-56237ce00beb",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "0f0515b0-d5e1-c7a5-9eb1-aa1d4cd2c2f5" : {
          "type" : "latest",
          "sizeX" : 8.5,
          "sizeY" : 6,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "5de80941-5632-bc32-b1de-27189693bd91",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.848379539472371
              }, {
                "name" : "perimeter",
                "type" : "attribute",
                "label" : "perimeter",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.7803202333041441
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1667907617961,
                  "endTimeMs" : 1667994017961
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0,0,0,0.87)",
            "padding" : "0px",
            "settings" : {
              "provider" : "openstreet-map",
              "gmApiKey" : "AIzaSyDoEx2kaGz3PxwbI9T7ccTSg5xjdw8Nw8Q",
              "gmDefaultMapType" : "roadmap",
              "mapProvider" : "OpenStreetMap.HOT",
              "useCustomProvider" : false,
              "customProviderTileUrl" : "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
              "mapProviderHere" : "HERE.normalDay",
              "credentials" : {
                "app_id" : "AhM6TzD9ThyK78CT3ptx",
                "app_code" : "p6NPiITB3Vv0GMUFnkLOOg"
              },
              "mapImageUrl" : "tb-image;/api/images/system/here_map_system_widget_map_image.svg",
              "tmApiKey" : "84d6d83e0e51e481e50454ccbe8986b",
              "tmDefaultMapType" : "roadmap",
              "latKeyName" : "1",
              "lngKeyName" : "1",
              "defaultZoomLevel" : 14,
              "defaultCenterPosition" : "49.348472, 32.108611",
              "disableScrollZooming" : false,
              "disableDoubleClickZooming" : false,
              "disableZoomControl" : false,
              "fitMapBounds" : true,
              "useDefaultCenterPosition" : false,
              "mapPageSize" : 16384,
              "markerOffsetX" : 0.5,
              "markerOffsetY" : 1,
              "posFunction" : "return {x: origXPos, y: origYPos};",
              "draggableMarker" : false,
              "showLabel" : false,
              "useLabelFunction" : false,
              "label" : "${entityName}",
              "showTooltip" : true,
              "showTooltipAction" : "click",
              "autocloseTooltip" : true,
              "useTooltipFunction" : false,
              "tooltipPattern" : "<b>${entityName}</b><br/><br/><b>Latitude:</b> ${latitude:7}<br/><b>Longitude:</b> ${longitude:7}<br/><b>Temperature:</b> ${temperature} °C<br/><small>See advanced settings for details</small>",
              "tooltipOffsetX" : 0,
              "tooltipOffsetY" : -1,
              "color" : "#fe7569",
              "useColorFunction" : false,
              "useMarkerImageFunction" : false,
              "markerImageSize" : 34,
              "markerImages" : [ ],
              "showPolygon" : true,
              "polygonKeyName" : "perimeter",
              "editablePolygon" : true,
              "showPolygonLabel" : false,
              "usePolygonLabelFunction" : false,
              "polygonLabel" : "${entityName}",
              "showPolygonTooltip" : false,
              "showPolygonTooltipAction" : "click",
              "autoClosePolygonTooltip" : true,
              "usePolygonTooltipFunction" : false,
              "polygonTooltipPattern" : "<b>${entityName}</b><br/><br/><b>TimeStamp:</b> ${ts:7}",
              "polygonColor" : "#3388ff",
              "polygonOpacity" : 0.2,
              "usePolygonColorFunction" : false,
              "polygonStrokeColor" : "#3388ff",
              "polygonStrokeOpacity" : 1,
              "polygonStrokeWeight" : 3,
              "usePolygonStrokeColorFunction" : false,
              "showCircle" : false,
              "circleKeyName" : "perimeter",
              "editableCircle" : false,
              "showCircleLabel" : false,
              "useCircleLabelFunction" : false,
              "circleLabel" : "${entityName}",
              "showCircleTooltip" : false,
              "showCircleTooltipAction" : "click",
              "autoCloseCircleTooltip" : true,
              "useCircleTooltipFunction" : false,
              "circleTooltipPattern" : "<b>${entityName}</b><br/><br/><b>TimeStamp:</b> ${ts:7}",
              "circleFillColor" : "#3388ff",
              "circleFillColorOpacity" : 0.2,
              "useCircleFillColorFunction" : false,
              "circleStrokeColor" : "#3388ff",
              "circleStrokeOpacity" : 1,
              "circleStrokeWeight" : 3,
              "useCircleStrokeColorFunction" : false,
              "snappable" : false,
              "initDragMode" : true,
              "hideAllControlButton" : false,
              "hideDrawControlButton" : false,
              "hideEditControlButton" : false,
              "hideRemoveControlButton" : false,
              "useClusterMarkers" : false,
              "zoomOnClick" : true,
              "maxClusterRadius" : 80,
              "animate" : true,
              "spiderfyOnMaxZoom" : false,
              "showCoverageOnHover" : true,
              "chunkedLoading" : false,
              "removeOutsideVisibleBounds" : true,
              "useIconCreateFunction" : false
            },
            "title" : "Fields",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "widgetStyle" : { },
            "actions" : {
              "markerClick" : [ ]
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "0f0515b0-d5e1-c7a5-9eb1-aa1d4cd2c2f5",
          "typeFullFqn" : "system.maps_v2.openstreetmap"
        },
        "ebe7de34-1afb-6b9e-c1d0-d38c7c2ebb8c" : {
          "typeFullFqn" : "tenant.testing",
          "type" : "static",
          "sizeX" : 6.5,
          "sizeY" : 12.5,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<div class='card'>HTML code here</div>",
              "cardCss" : ".card {\n    font-weight: bold;\n    font-size: 32px;\n    color: #999;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}"
            },
            "title" : "testing",
            "dropShadow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "ebe7de34-1afb-6b9e-c1d0-d38c7c2ebb8c"
        },
        "036bbcbd-dac7-17c3-7530-39d65785a391" : {
          "typeFullFqn" : "tenant.testing_2",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ {
              "type" : "device",
              "name" : "",
              "deviceId" : "1afcf1c0-59d7-11ef-a444-4f7ceb4fe115",
              "dataKeys" : [ {
                "name" : "Total",
                "type" : "timeseries",
                "label" : "Total",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.9019841037318208
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1727167168239,
                  "endTimeMs" : 1727253568239
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "layout" : "square",
              "autoScale" : false,
              "showLabel" : true,
              "labelFont" : {
                "family" : "Roboto",
                "size" : 16,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "500",
                "lineHeight" : ""
              },
              "labelColor" : {
                "type" : "constant",
                "color" : "rgba(0, 0, 0, 0.87)",
                "colorFunction" : "var temperature = value;\nif (typeof temperature !== undefined) {\n  var percent = (temperature + 60)/120 * 100;\n  return tinycolor.mix('blue', 'red', percent).toHexString();\n}\nreturn 'blue';"
              },
              "showIcon" : true,
              "iconSize" : 40,
              "iconSizeUnit" : "px",
              "icon" : "thermostat",
              "iconColor" : {
                "type" : "constant",
                "color" : "#5469FF",
                "colorFunction" : "var temperature = value;\nif (typeof temperature !== undefined) {\n  var percent = (temperature + 60)/120 * 100;\n  return tinycolor.mix('blue', 'red', percent).toHexString();\n}\nreturn 'blue';"
              },
              "valueFont" : {
                "family" : "Roboto",
                "size" : 52,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "500",
                "lineHeight" : "100%"
              },
              "valueColor" : {
                "type" : "constant",
                "color" : "rgba(0, 0, 0, 0.87)",
                "colorFunction" : "var temperature = value;\nif (typeof temperature !== undefined) {\n  var percent = (temperature + 60)/120 * 100;\n  return tinycolor.mix('blue', 'red', percent).toHexString();\n}\nreturn 'blue';"
              },
              "showDate" : false,
              "dateFormat" : {
                "format" : null,
                "lastUpdateAgo" : true,
                "custom" : false,
                "auto" : false
              },
              "dateFont" : {
                "family" : "Roboto",
                "size" : 12,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "500",
                "lineHeight" : ""
              },
              "dateColor" : {
                "type" : "constant",
                "color" : "rgba(0, 0, 0, 0.38)",
                "colorFunction" : "var temperature = value;\nif (typeof temperature !== undefined) {\n  var percent = (temperature + 60)/120 * 100;\n  return tinycolor.mix('blue', 'red', percent).toHexString();\n}\nreturn 'blue';"
              },
              "background" : {
                "type" : "color",
                "color" : "#fff",
                "overlay" : {
                  "enabled" : false,
                  "color" : "rgba(255,255,255,0.72)",
                  "blur" : 3
                }
              }
            },
            "title" : "Attributes card",
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "dropShadow" : true,
            "enableFullscreen" : true,
            "enableDataExport" : true,
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "036bbcbd-dac7-17c3-7530-39d65785a391"
        },
        "c3c5507f-8094-d5b7-1b22-3e87baae5628" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1738637826321,
                  "endTimeMs" : 1738724226321
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "a5a993e3-eebd-bc51-9139-dba01ca706aa",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5213619733883972
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "actionCellButton" : [ {
                "name" : "list device",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "list-device",
                "setEntityId" : true,
                "stateEntityParamName" : "selectedAsset",
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "7d25f22f-a1a8-d988-56f7-61d392ca5845"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "c3c5507f-8094-d5b7-1b22-3e87baae5628"
        },
        "b89b2a9f-cbc9-047c-8ee9-9dd766c4c437" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1738639310427,
                  "endTimeMs" : 1738725710427
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "2975cf2d-f6f1-fbd6-2d79-870c6e6e1f3b",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.39254716933280864
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : { },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "b89b2a9f-cbc9-047c-8ee9-9dd766c4c437"
        },
        "3c5df636-a186-a435-de28-f45b27a465af" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1738639322211,
                  "endTimeMs" : 1738725722211
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "98490e24-a66d-7a8f-1a82-5e073eac09e4",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.6023046976699251
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "actionCellButton" : [ {
                "name" : "device",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "detail-devices",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "7c2d5bd6-4958-5e65-6160-ee22a9934b68"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "3c5df636-a186-a435-de28-f45b27a465af"
        },
        "036e7f06-e0f6-a4e1-ee69-8d51718d263f" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1738639736305,
                  "endTimeMs" : 1738726136305
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "3f2def59-24c2-10ab-c7fa-ca76d5aad35e",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.45467227071886995
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "basic",
            "actions" : { },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "036e7f06-e0f6-a4e1-ee69-8d51718d263f"
        }
      },
      "states" : {
        "default" : {
          "name" : "test",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "b71791d6-a00a-064b-88d2-59ff2840278b" : {
                  "sizeX" : 8,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 0
                },
                "d73e879c-7eb9-15f7-365f-70966d2ae846" : {
                  "sizeX" : 8,
                  "sizeY" : 2,
                  "row" : 2,
                  "col" : 2
                },
                "34c4be80-acf4-a20c-3e29-a158425e23c4" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 4,
                  "col" : 0
                },
                "17a7dc98-2a28-c8b5-df64-f968f04da01a" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 4,
                  "col" : 7
                },
                "06468f99-78fe-181e-8bfa-814e13b03948" : {
                  "sizeX" : 12,
                  "sizeY" : 6,
                  "row" : 7,
                  "col" : 0
                },
                "dc341b1e-48f7-b44b-33a8-56237ce00beb" : {
                  "sizeX" : 12,
                  "sizeY" : 6,
                  "row" : 7,
                  "col" : 12
                },
                "ebe7de34-1afb-6b9e-c1d0-d38c7c2ebb8c" : {
                  "sizeX" : 5,
                  "sizeY" : 8,
                  "row" : 13,
                  "col" : 0
                },
                "036bbcbd-dac7-17c3-7530-39d65785a391" : {
                  "sizeX" : 9,
                  "sizeY" : 8,
                  "row" : 13,
                  "col" : 5
                },
                "c3c5507f-8094-d5b7-1b22-3e87baae5628" : {
                  "sizeX" : 7,
                  "sizeY" : 6,
                  "row" : 1,
                  "col" : 14
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "layoutType" : "default"
              }
            }
          }
        },
        "setup_field_polygon" : {
          "name" : "setup_field_polygon",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "0f0515b0-d5e1-c7a5-9eb1-aa1d4cd2c2f5" : {
                  "sizeX" : 24,
                  "sizeY" : 10,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 0,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "layoutType" : "default"
              }
            }
          }
        },
        "list-device" : {
          "name" : "${selectedAsset:entityName}",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "b89b2a9f-cbc9-047c-8ee9-9dd766c4c437" : {
                  "sizeX" : 7,
                  "sizeY" : 6,
                  "row" : 0,
                  "col" : 0
                },
                "3c5df636-a186-a435-de28-f45b27a465af" : {
                  "sizeX" : 7,
                  "sizeY" : 6,
                  "row" : 0,
                  "col" : 7
                }
              },
              "gridSettings" : {
                "layoutType" : "default",
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        },
        "detail-devices" : {
          "name" : "${entityName}",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "036e7f06-e0f6-a4e1-ee69-8d51718d263f" : {
                  "sizeX" : 7,
                  "sizeY" : 6,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "layoutType" : "default",
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "7ab67317-5908-38e2-96c7-571606959c82" : {
          "id" : "7ab67317-5908-38e2-96c7-571606959c82",
          "alias" : "Asset Devices",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : "selectedAsset",
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "deviceTypes" : [ "Sonoff", "Temperature", "sensor smoke", "PUSH BUTTON" ]
          }
        },
        "5de80941-5632-bc32-b1de-27189693bd91" : {
          "id" : "5de80941-5632-bc32-b1de-27189693bd91",
          "alias" : "current device",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        },
        "b6b7bd3f-ccb6-c3dd-b417-9b274278a4e3" : {
          "id" : "b6b7bd3f-ccb6-c3dd-b417-9b274278a4e3",
          "alias" : "Fields",
          "filter" : {
            "type" : "entityList",
            "resolveMultiple" : true,
            "entityType" : "DEVICE",
            "entityList" : [ "50b35cd0-6a73-11ef-84e0-bdaca7ce12ef", "03218d90-d6fb-11ee-bebe-d97a1bfe6a79" ]
          }
        },
        "a5a993e3-eebd-bc51-9139-dba01ca706aa" : {
          "id" : "a5a993e3-eebd-bc51-9139-dba01ca706aa",
          "alias" : "home",
          "filter" : {
            "type" : "assetType",
            "resolveMultiple" : true,
            "assetTypes" : [ "Smart Residences" ],
            "assetNameFilter" : ""
          }
        },
        "2975cf2d-f6f1-fbd6-2d79-870c6e6e1f3b" : {
          "id" : "2975cf2d-f6f1-fbd6-2d79-870c6e6e1f3b",
          "alias" : "list-device",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : "selectedAsset",
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "deviceTypes" : [ "SELIN", "SoundBox", "soundbox_ECP" ]
          }
        },
        "98490e24-a66d-7a8f-1a82-5e073eac09e4" : {
          "id" : "98490e24-a66d-7a8f-1a82-5e073eac09e4",
          "alias" : "list-lantai",
          "filter" : {
            "type" : "assetSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : "selectedAsset",
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "assetTypes" : [ "LANTAI" ]
          }
        },
        "3f2def59-24c2-10ab-c7fa-ca76d5aad35e" : {
          "id" : "3f2def59-24c2-10ab-c7fa-ca76d5aad35e",
          "alias" : "detail-devices",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : "selectedDevice",
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "deviceTypes" : [ "SELIN", "soundbox_ECP" ]
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1725176627625,
            "endTimeMs" : 1725263027625
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "name" : "test",
    "resources" : null,
    "assignedCustomers" : null,
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "165f0590-68ff-11ef-84e0-bdaca7ce12ef"
    },
    "ownerId" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}