{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "b71791d6-a00a-064b-88d2-59ff2840278b" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "device",
              "name" : null,
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "alarmsCount",
                "type" : "timeseries",
                "label" : "alarmsCount",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5602815622751198
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695019258348,
                  "endTimeMs" : 1695105658348
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\r\n    <div class='content'>\r\n    <img height=\"80px\" id=\"image\"/>\r\n        <audio id=\"sound\">\r\n         <source src=\"https://free-sound-effects.net/mp3/01/free-sound-effects-AA2G40A6.mp3\"  type=\"audio/mpeg\" />\r\n        </audio>\r\n    </div>\r\n</div>\r\n\r\n\r\n<script type=\"text/javascript\" charset=\"utf-8\">\r\n    var card = document.querySelector('.card');\r\n    var image = document.getElementById(\"image\");\r\n    \r\n    if (${alarmsCount} >= 1) {\r\n        document.getElementById(\"sound\").setAttribute(\"autoplay\", true);\r\n        document.getElementById(\"sound\").setAttribute(\"loop\", true);\r\n        image.src = \"https://media.tenor.com/8vSJsVW-1pQAAAAi/police-car-light-joypixels.gif\";\r\n        card.classList.add('blinking-background');\r\n    } else {\r\n        document.getElementById(\"sound\").removeAttribute(\"autoplay\");\r\n        document.getElementById(\"sound\").removeAttribute(\"loop\");\r\n        image.src = \"https://cdn-icons-png.flaticon.com/128/2785/2785693.png\";\r\n        card.classList.remove('blinking-background');\r\n    }\r\n\r\n</script>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 0px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n\n.blinking-background {\n    animation: blink 1s infinite;\n}\n\n@keyframes blink {\n    0% {\n        background-color: red;\n    }\n    50% {\n        background-color: transparent;\n    }\n    100% {\n        background-color: red;\n    }\n}"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "8px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "b71791d6-a00a-064b-88d2-59ff2840278b",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "d73e879c-7eb9-15f7-365f-70966d2ae846" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "device",
              "name" : null,
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "alarmsCount",
                "type" : "timeseries",
                "label" : "alarmsCount",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5602815622751198
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695019258348,
                  "endTimeMs" : 1695105658348
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content'>\n    <img height=\"80px\" id=\"image\"/>\n        <audio id=\"sound\">\n         <source src=\"https://free-sound-effects.net/mp3/01/free-sound-effects-AA2G40A6.mp3\"  type=\"audio/mpeg\" />\n        </audio>\n    </div>\n</div>\n\n\n<script type=\"text/javascript\" charset=\"utf-8\">\n    var image = document.getElementById(\"image\");\n    if (${alarmsCount} >= 1) {\n        document.getElementById(\"sound\").setAttribute(\"autoplay\", ${alarmsCount});\n        document.getElementById(\"sound\").setAttribute(\"loop\", ${alarmsCount});\n        image.src= \"https://media.tenor.com/8vSJsVW-1pQAAAAi/police-car-light-joypixels.gif\";\n    } else {\n        document.getElementById(\"sound\").removeAttribute(\"autoplay\");\n        document.getElementById(\"sound\").removeAttribute(\"loop\");\n        image.src= \"https://cdn-icons-png.flaticon.com/128/2785/2785693.png\";\n    }\n    </script>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 0px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "8px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "d73e879c-7eb9-15f7-365f-70966d2ae846",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "34c4be80-acf4-a20c-3e29-a158425e23c4" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "7ab67317-5908-38e2-96c7-571606959c82",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725350795478,
                  "endTimeMs" : 1725437195478
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Peta Indonesia dengan Polygon</title>\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\r\n    <style>\r\n        #map {\r\n            height: 100vh;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"map\"></div>\r\n\r\n    <script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\r\n    <script>\r\n        // Inisialisasi peta dan atur view ke koordinat Indonesia\r\n        var map = L.map('map').setView([-2.5489, 118.0149], 5);\r\n\r\n        // Tambahkan tile layer dari OpenStreetMap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attribution: '© OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        // Array untuk menyimpan koordinat titik-titik poligon\r\n        var latlngs = [];\r\n\r\n        // Fungsi untuk menambahkan titik ke dalam poligon\r\n        function onMapClick(e) {\r\n            latlngs.push(e.latlng);\r\n            L.marker(e.latlng).addTo(map);\r\n\r\n            // Jika sudah lebih dari dua titik, gambarkan poligon\r\n            if (latlngs.length > 2) {\r\n                if (window.polygon) {\r\n                    map.removeLayer(window.polygon);\r\n                }\r\n                window.polygon = L.polygon(latlngs, {\r\n                    color: 'red'\r\n                }).addTo(map);\r\n            }\r\n        }\r\n\r\n        // Event listener untuk klik peta\r\n        map.on('click', onMapClick);\r\n    </script>\r\n</body>\r\n\r\n</html>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "34c4be80-acf4-a20c-3e29-a158425e23c4"
        },
        "17a7dc98-2a28-c8b5-df64-f968f04da01a" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "7ab67317-5908-38e2-96c7-571606959c82",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725350813991,
                  "endTimeMs" : 1725437213991
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Peta Indonesia dengan Polygon</title>\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />\r\n    <style>\r\n        #map {\r\n            height: 100vh;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"map\"></div>\r\n\r\n    <script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>\r\n    <script>\r\n        // Inisialisasi peta dan atur view ke koordinat Indonesia\r\n        var map = L.map('map').setView([-2.5489, 118.0149], 5);\r\n\r\n        // Tambahkan tile layer dari OpenStreetMap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attribution: '© OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        // Array untuk menyimpan koordinat titik-titik poligon\r\n        var latlngs = [];\r\n\r\n        // Fungsi untuk menambahkan titik ke dalam poligon\r\n        function onMapClick(e) {\r\n            latlngs.push(e.latlng);\r\n            L.marker(e.latlng).addTo(map);\r\n\r\n            // Jika sudah lebih dari dua titik, gambarkan poligon\r\n            if (latlngs.length > 2) {\r\n                if (window.polygon) {\r\n                    map.removeLayer(window.polygon);\r\n                }\r\n                window.polygon = L.polygon(latlngs, {\r\n                    color: 'red'\r\n                }).addTo(map);\r\n            }\r\n        }\r\n\r\n        // Event listener untuk klik peta\r\n        map.on('click', onMapClick);\r\n    </script>\r\n</body>\r\n\r\n</html>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "17a7dc98-2a28-c8b5-df64-f968f04da01a"
        },
        "06468f99-78fe-181e-8bfa-814e13b03948" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1725351738141,
                  "endTimeMs" : 1725438138141
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "device",
              "name" : "",
              "deviceId" : "e0e1dc00-d5d6-11ee-bebe-d97a1bfe6a79",
              "entityAliasId" : null,
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.516845129489915
              }, {
                "name" : "latitude",
                "type" : "timeseries",
                "label" : "latitude",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.9142324703108704
              }, {
                "name" : "longitude",
                "type" : "timeseries",
                "label" : "longitude",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.07301415975418357
              }, {
                "name" : "perimeter",
                "type" : "attribute",
                "label" : "perimeter",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.1325959979069331
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "rowClick" : [ ],
              "actionCellButton" : [ {
                "name" : "details",
                "icon" : "visibility",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addFieldForm=\"ngForm\" [formGroup]=\"editFieldFormGroup\"\n      (ngSubmit)=\"save()\" class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit Asset</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <section fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Asset Name</mat-label>\n                    <input matInput formControlName=\"name\" required>\n                    <mat-error *ngIf=\"editFieldFormGroup.get('name').hasError('required')\">\n                        Asset Name is required.\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>HRB Type</mat-label>\n                    <input matInput formControlName=\"type\" readonly>\n                    <mat-error *ngIf=\"editFieldFormGroup.get('type').hasError('required')\">\n                        HRB Type is required.\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>perimeter</mat-label>\n                    <input type=\"text\" matInput formControlName=\"perimeter\">\n                </mat-form-field>\n            </div>\n        </section>\n        <!--<section fxLayout=\"column\">-->\n        <!--    <tb-dashboard-state -->\n        <!--        style=\"height: 600px; width: 100%;\"-->\n        <!--        [ctx]=\"widgetContext\"-->\n        <!--        stateId=\"maps\"-->\n        <!--        [entityId]=\"entityId\">-->\n        <!--    </tb-dashboard-state>-->\n        <!--</section>-->\n    </div>\n    \n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [enabled]=\"(isLoading$ | async) || editFieldFormGroup.invalid || !(editFieldFormGroup.dirty || polygonChanged) || !hasPolygon\">\n            Save\n        </button>\n    </div>\n</form>\n",
                "customCss" : ".edit-entity-form{\n    width: 600px;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditFieldDialog();\n\nfunction openEditFieldDialog() {\n    customDialog.customDialog(htmlTemplate, EditFieldDialogController).subscribe();\n}\n\nfunction EditFieldDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityName = entityName;\n    vm.entityId = entityId;\n    \n    vm.cropTypes = ['rice', 'corn', 'wheat', \n    'sugarcane', 'maize (corn)', 'soybean oil', 'palm oil', 'potatoes',\n    'cassava', 'legume pulses', 'sunflower seed oil', 'rape and mustard oil',\n    'other vegetables', 'other fruits', 'sorghum', 'millet', 'groundnuts', 'beans',\n    'sweet potatoes', 'bananas', 'various nuts', 'soybeans', 'cottonseed oil',\n    'groundnut oil', 'yams'];\n    \n    vm.widgetContext = widgetContext;\n    vm.field = null;\n    \n    vm.perimeter = null;\n    vm.hasPolygon = false;\n    vm.polygonChanged = false;\n    vm.polygonSubscription = null;\n    vm.lat = null;\n    vm.long = null;\n\n    \n    vm.editFieldFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      type: [null],\n      label: [null],\n      cropType: [null, [vm.validators.required]],\n      latitude: [null],\n      longitude: [null],\n      perimeter: [null]\n    });\n\n    vm.cancel = function() {\n        cancelPolygonSubscription();\n        restorePolygon().subscribe(\n            function () {\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.save = function() {\n        vm.editFieldFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveField()\n        ]).subscribe(\n            function () {\n                cancelPolygonSubscription();\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    // vm.formatMoistureThreshold = function(value) {\n    //     return value + '%';\n    // };\n    \n    loadField();\n    \n    function createPolygonSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.field.id.entityType,\n            entityId: vm.field.id.id,\n            attributes: [{ name: 'latitude' }]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkPolygon(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(polygonSubscription) {\n                vm.polygonSubscription = polygonSubscription;\n            })\n        );\n        \n    }\n    \n    function checkPolygon(data) {\n        var datasourceData = data[0].data;\n        var keyData = datasourceData[0];\n        var value = keyData[1];\n        if (value && Array.isArray(JSON.parse(value))) {\n            vm.hasPolygon = true;\n        } else {\n            vm.hasPolygon = false;\n        }\n        vm.polygonChanged = vm.lat !== value;\n        vm.polygonChanged = vm.long !== value;\n    }\n    \n    function cancelPolygonSubscription() {\n        if (vm.polygonSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.polygonSubscription.id);\n            vm.polygonSubscription = null;\n        }\n    }\n\n    function saveField() {\n        const formValues = vm.editFieldFormGroup.value;\n        vm.field.name = formValues.name;\n        vm.field.type = formValues.type;\n        return assetService.saveAsset(vm.field);\n    }\n\n    function saveAttributes(entityId) {\n        // let cropType = vm.editFieldFormGroup.get('cropType').value;\n        let latitude = vm.editFieldFormGroup.get('latitude').value;\n        let longitude = vm.editFieldFormGroup.get('longitude').value;\n        let perimeter = vm.editFieldFormGroup.get('perimeter').value;\n        let attributesArray = [\n            // {key: 'cropType', value: cropType},\n            {key: 'latitude', value: latitude},\n            {key: 'longitude', value: longitude},\n            {key: 'perimeter', value: perimeter}\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function restorePolygon() {\n        if (vm.polygonChanged) {\n            return attributeService.saveEntityAttributes(vm.field.id, \"SERVER_SCOPE\", [{key: 'lat', value: JSON.parse(vm.lat)}]);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n    \n    function loadField() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['latitude', 'longitude','perimeter', 'lat']),\n            assetService.getAsset(entityId.id)\n        ]).subscribe(\n            function (data) {\n                var attributes = data[0];\n                for (var i = 0; i < attributes.length; i ++) {\n                    if (attributes[i].key === 'latitude') {\n                        var latitude = attributes[i].value;\n                        vm.editFieldFormGroup.get('latitude').patchValue(latitude, {emitEvent: false});\n                    } else if (attributes[i].key === 'longitude') {\n                        var longitude = attributes[i].value;\n                        vm.editFieldFormGroup.get('longitude').patchValue(longitude, {emitEvent: false});\n                    } else if (attributes[i].key === 'perimeter') {\n                        var perimeter = attributes[i].value;\n                        vm.editFieldFormGroup.get('perimeter').patchValue(perimeter, {emitEvent: false});\n                    } else if (attributes[i].key === 'lat') {\n                        vm.lat = JSON.stringify(attributes[i].value);\n                    } else if (attributes[i].key === 'long') {\n                        vm.long = JSON.stringify(attributes[i].value);\n                    }\n                }\n                vm.field = data[1];\n                vm.editFieldFormGroup.get('name').patchValue(vm.field.name, {emitEvent: false});\n                vm.editFieldFormGroup.get('type').patchValue(vm.field.type, {emitEvent: false});\n                // vm.editFieldFormGroup.get('label').patchValue(vm.field.label, {emitEvent: false});\n                createPolygonSubscription();\n            }\n        );\n    }\n\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "98763ba1-f909-8a9d-9283-ff50759b92f7"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "06468f99-78fe-181e-8bfa-814e13b03948"
        }
      },
      "states" : {
        "default" : {
          "name" : "test",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "b71791d6-a00a-064b-88d2-59ff2840278b" : {
                  "sizeX" : 8,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 0
                },
                "d73e879c-7eb9-15f7-365f-70966d2ae846" : {
                  "sizeX" : 8,
                  "sizeY" : 2,
                  "row" : 2,
                  "col" : 2
                },
                "34c4be80-acf4-a20c-3e29-a158425e23c4" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 4,
                  "col" : 0
                },
                "17a7dc98-2a28-c8b5-df64-f968f04da01a" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 4,
                  "col" : 7
                },
                "06468f99-78fe-181e-8bfa-814e13b03948" : {
                  "sizeX" : 18,
                  "sizeY" : 6,
                  "row" : 7,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "7ab67317-5908-38e2-96c7-571606959c82" : {
          "id" : "7ab67317-5908-38e2-96c7-571606959c82",
          "alias" : "Asset Devices",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : "selectedAsset",
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "deviceTypes" : [ "Sonoff", "Temperature", "sensor smoke", "PUSH BUTTON" ]
          }
        },
        "5de80941-5632-bc32-b1de-27189693bd91" : {
          "id" : "5de80941-5632-bc32-b1de-27189693bd91",
          "alias" : "current device",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1725176627625,
            "endTimeMs" : 1725263027625
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "165f0590-68ff-11ef-84e0-bdaca7ce12ef"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "test",
    "ownerId" : null,
    "title" : "test"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}