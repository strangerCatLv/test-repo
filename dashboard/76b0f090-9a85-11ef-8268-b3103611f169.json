{
  "entityType" : "DASHBOARD",
  "entity" : {
    "title" : "shellly",
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "eaa1a76a-7afb-2ea4-d584-8fbb4d8836df" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1759196698542,
                  "endTimeMs" : 1759283098542
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "entitiesTitle" : "Entities"
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "c8e1fea6-c90b-625f-b0a9-334b850ed915",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.03236801097533126
              }, {
                "name" : "deviceId",
                "type" : "attribute",
                "label" : "deviceId",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.01141314159059681
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "rowClick" : [ ],
              "actionCellButton" : [ {
                "name" : "current",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "current_device",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "2a1bd994-c551-b808-7fb3-7d793e903a27"
              }, {
                "name" : "room",
                "icon" : "chair",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>\n        <span class=\"flex-1\"></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content class=\"flex flex-col\">\n        <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n            <mat-form-field class=\"mat-block flex-1\">\n                <mat-label>Entity Name</mat-label>\n                <input matInput formControlName=\"entityName\" required readonly=\"\">\n            </mat-form-field>\n            <mat-form-field class=\"mat-block flex-1\">\n                <mat-label>Entity Label</mat-label>\n                <input matInput formControlName=\"entityLabel\">\n            </mat-form-field>\n        </div>\n        <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n            <mat-form-field class=\"mat-block flex-1\">\n                <mat-label>Entity Type</mat-label>\n                <input matInput formControlName=\"entityType\" readonly>\n            </mat-form-field>\n            <mat-form-field class=\"mat-block flex-1\">\n                <mat-label>Type</mat-label>\n                <input matInput formControlName=\"type\" readonly>\n            </mat-form-field>\n        </div>\n        <div formGroupName=\"attributes\" class=\"flex flex-col\">\n            <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n                <mat-form-field class=\"mat-block flex-1\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n                <mat-form-field class=\"mat-block flex-1\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n                <mat-form-field class=\"mat-block flex-1\">\n                    <mat-label>Address</mat-label>\n                    <input matInput formControlName=\"address\">\n                </mat-form-field>\n                <mat-form-field class=\"mat-block flex-1\">\n                    <mat-label>Owner</mat-label>\n                    <input matInput formControlName=\"owner\">\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n                <mat-form-field class=\"mat-block flex-1\">\n                    <mat-label>Integer Value</mat-label>\n                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">\n                    <mat-error *ngIf=\"editEntityFormGroup.get('attributes.number').hasError('pattern')\">\n                        Invalid integer value.\n                    </mat-error>\n                </mat-form-field>\n                <div class=\"boolean-value-input flex flex-1 flex-col items-start justify-center\">\n                    <label class=\"checkbox-label\">Boolean Value</label>\n                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">\n                        {{ (editEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}\n                    </mat-checkbox>\n                </div>\n            </div>\n        </div>\n        <div class=\"relations-list old-relations\">\n            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>\n            <div class=\"body\" [class.!hidden]=\"!oldRelations().length\">\n                <div class=\"row flex flex-row items-center justify-start\" formArrayName=\"oldRelations\" \n                     *ngFor=\"let relation of oldRelations().controls; let i = index;\">\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2 flex flex-1 flex-row\" style=\"padding: 5px 0 5px 5px;\">\n                        <div class=\"flex flex-1 flex-col\">\n                            <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">\n                                    <mat-label>Direction</mat-label>\n                                    <mat-select formControlName=\"direction\" name=\"direction\">\n                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">\n                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">\n                                        Relation direction is required.\n                                    </mat-error>\n                                </mat-form-field>\n                                <tb-relation-type-autocomplete\n                                        class=\"mat-block flex-1\"\n                                        formControlName=\"relationType\"\n                                        required=\"true\">\n                                </tb-relation-type-autocomplete>\n                            </div>\n                            <div class=\"flex flex-row xs:flex-col\">\n                                <tb-entity-select\n                                        class=\"mat-block flex-1\"\n                                        required=\"true\"\n                                        formControlName=\"relatedEntity\">\n                                </tb-entity-select>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col items-center justify-center\">\n                            <button mat-icon-button color=\"primary\"\n                                    aria-label=\"Remove\"\n                                    type=\"button\"\n                                    (click)=\"removeOldRelation(i, relation.value)\"\n                                    matTooltip=\"Remove relation\"\n                                    matTooltipPosition=\"above\">\n                                <mat-icon>close</mat-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"relations-list\">\n            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>\n            <div class=\"body\" [class.!hidden]=\"!relations().length\">\n                <div class=\"row flex flex-row items-center justify-start\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">\n                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2 flex flex-1 flex-row\" style=\"padding: 5px 0 5px 5px;\">\n                        <div class=\"flex flex-1 flex-col\">\n                            <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">\n                                    <mat-label>Direction</mat-label>\n                                    <mat-select formControlName=\"direction\" name=\"direction\">\n                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">\n                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">\n                                        Relation direction is required.\n                                    </mat-error>\n                                </mat-form-field>\n                                <tb-relation-type-autocomplete\n                                        class=\"mat-block flex-1\"\n                                        formControlName=\"relationType\"\n                                        [required]=\"true\">\n                                </tb-relation-type-autocomplete>\n                            </div>\n                            <div class=\"flex flex-row xs:flex-col\">\n                                <tb-entity-select\n                                        class=\"mat-block flex-1\"\n                                        [required]=\"true\"\n                                        formControlName=\"relatedEntity\">\n                                </tb-entity-select>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col items-center justify-center\">\n                            <button mat-icon-button color=\"primary\"\n                                    aria-label=\"Remove\"\n                                    type=\"button\"\n                                    (click)=\"removeRelation(i)\"\n                                    matTooltip=\"Remove relation\"\n                                    matTooltipPosition=\"above\">\n                                <mat-icon>close</mat-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <button mat-raised-button color=\"primary\"\n                        type=\"button\"\n                        (click)=\"addRelation()\"\n                        matTooltip=\"Add Relation\"\n                        matTooltipPosition=\"above\">\n                    Add\n                </button>\n            </div>\n        </div>\n    </div>\n    <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>\n",
                "customCss" : ".edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}",
                "customFunction" : "\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    };\n    vm.attributes = {};\n    vm.oldRelationsData = [];\n    vm.relationsToDelete = [];\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityType: [null],\n        entityLabel: [null],\n        type: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null],\n            address: [null],\n            owner: [null],\n            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n            booleanValue: [false]\n        }),\n        oldRelations: vm.fb.array([]),\n        relations: vm.fb.array([])\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.relations = function() {\n        return vm.editEntityFormGroup.get('relations');\n    };\n\n    vm.oldRelations = function() {\n        return vm.editEntityFormGroup.get('oldRelations');\n    };\n\n    vm.addRelation = function() {\n        vm.relations().push(vm.fb.group({\n            relatedEntity: [null, [vm.validators.required]],\n            relationType: [null, [vm.validators.required]],\n            direction: [null, [vm.validators.required]]\n        }));\n    };\n\n    function addOldRelation() {\n        vm.oldRelations().push(vm.fb.group({\n            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n            relationType: [{value: null, disabled: true}, [vm.validators.required]],\n            direction: [{value: null, disabled: true}, [vm.validators.required]]\n        }));\n    }\n\n    vm.removeRelation = function(index) {\n        vm.relations().removeAt(index);\n        vm.relations().markAsDirty();\n    };\n\n    vm.removeOldRelation = function(index, relation) {\n        vm.oldRelations().removeAt(index);\n        vm.relationsToDelete.push(relation);\n        vm.oldRelations().markAsDirty();\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveRelations(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n    function getEntityRelations(relations) {\n        let relationsFrom = relations[0];\n        let relationsTo = relations[1];\n        for (let i=0; i < relationsFrom.length; i++) {\n            let relation = {\n                direction: 'FROM',\n                relationType: relationsFrom[i].type,\n                relatedEntity: relationsFrom[i].to\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n        for (let i=0; i < relationsTo.length; i++) {\n            let relation = {\n                direction: 'TO',\n                relationType: relationsTo[i].type,\n                relatedEntity: relationsTo[i].from\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n    }\n\n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            entityRelationService.findInfoByFrom(entityId),\n            entityRelationService.findInfoByTo(entityId),\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n            entityService.getEntity(entityId.entityType, entityId.id)\n        ]).subscribe(\n            function (data) {\n                getEntityRelations(data.slice(0,2));\n                getEntityAttributes(data[2]);\n                vm.entity = data[3];\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entity.name,\n                    entityType: vm.entityType,\n                    entityLabel: vm.entity.label,\n                    type: vm.entity.type,\n                    attributes: vm.attributes,\n                    oldRelations: vm.oldRelationsData\n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        if (vm.entity.label !== formValues.entityLabel){\n            vm.entity.label = formValues.entityLabel;\n            if (formValues.entityType == 'ASSET') {\n                return assetService.saveAsset(vm.entity);\n            } else if (formValues.entityType == 'DEVICE') {\n                return deviceService.saveDevice(vm.entity);\n            }\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveRelations(entityId) {\n        let relations = vm.editEntityFormGroup.get('relations').value;\n        let tasks = [];\n        for(let i=0; i < relations.length; i++) {\n            let relation = {\n                type: relations[i].relationType,\n                typeGroup: 'COMMON'\n            };\n            if (relations[i].direction == 'FROM') {\n                relation.to = relations[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = relations[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.saveRelation(relation));\n        }\n        for (let i=0; i < vm.relationsToDelete.length; i++) {\n            let relation = {\n                type: vm.relationsToDelete[i].relationType\n            };\n            if (vm.relationsToDelete[i].direction == 'FROM') {\n                relation.to = vm.relationsToDelete[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = vm.relationsToDelete[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n        }\n        if (tasks.length > 0) {\n            return widgetContext.rxjs.forkJoin(tasks);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a055fd6a-16a7-24ed-010b-703cd3604eb5"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "eaa1a76a-7afb-2ea4-d584-8fbb4d8836df"
        },
        "0feb893f-e24f-3092-37ff-24af73320f34" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "0cf2a65b-ec3a-1fd3-c4a5-d9192b64284f",
              "dataKeys" : [ {
                "name" : "deviceId",
                "type" : "attribute",
                "label" : "deviceId",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.48928695843313164
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1759197037632,
                  "endTimeMs" : 1759283437632
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content'>\n        <div class='column'>\n            <h1>${entityName}</h1>\n            <div class='value'>\n                ${deviceId}\n            </div>    \n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "0feb893f-e24f-3092-37ff-24af73320f34"
        }
      },
      "states" : {
        "default" : {
          "name" : "shellly",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "eaa1a76a-7afb-2ea4-d584-8fbb4d8836df" : {
                  "sizeX" : 7,
                  "sizeY" : 6,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "layoutType" : "default"
              }
            }
          }
        },
        "current_device" : {
          "name" : "current_device",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "0feb893f-e24f-3092-37ff-24af73320f34" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "layoutType" : "default",
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        },
        "list_room" : {
          "name" : "list_room",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : { },
              "gridSettings" : {
                "layoutType" : "default",
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "c8e1fea6-c90b-625f-b0a9-334b850ed915" : {
          "id" : "c8e1fea6-c90b-625f-b0a9-334b850ed915",
          "alias" : "device type",
          "filter" : {
            "type" : "deviceType",
            "resolveMultiple" : true,
            "deviceTypes" : [ "thermostat" ],
            "deviceNameFilter" : ""
          }
        },
        "0cf2a65b-ec3a-1fd3-c4a5-d9192b64284f" : {
          "id" : "0cf2a65b-ec3a-1fd3-c4a5-d9192b64284f",
          "alias" : "current device",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1730621950407,
            "endTimeMs" : 1730708350407
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "name" : "shellly",
    "resources" : null,
    "assignedCustomers" : null,
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "76b0f090-9a85-11ef-8268-b3103611f169"
    },
    "ownerId" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}