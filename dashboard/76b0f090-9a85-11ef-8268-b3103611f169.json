{
  "entityType" : "DASHBOARD",
  "entity" : {
    "title" : "shellly",
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "eaa1a76a-7afb-2ea4-d584-8fbb4d8836df" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1759196698542,
                  "endTimeMs" : 1759283098542
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "LIST DEVICE USERS",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "entityNameColumnTitle" : "",
              "displayEntityLabel" : false,
              "entityLabelColumnTitle" : "",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "pageStepCount" : 3,
              "pageStepIncrement" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "a751d70e-5817-02e8-4227-2457bbcfe172",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.03236801097533126
              }, {
                "name" : "deviceId",
                "type" : "attribute",
                "label" : "deviceId",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.01141314159059681
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "rowClick" : [ ],
              "actionCellButton" : [ {
                "name" : "current",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "current_device",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "2a1bd994-c551-b808-7fb3-7d793e903a27"
              }, {
                "name" : "room",
                "icon" : "chair",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\"\r\n    [formGroup]=\"editEntityFormGroup\" (ngSubmit)=\"save()\"\r\n    class=\"edit-entity-form\">\r\n    <mat-toolbar class=\"flex flex-row\" color=\"primary\">\r\n        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}\r\n        </h2>\r\n        <span class=\"flex-1\"></span>\r\n        <button mat-icon-button (click)=\"cancel()\"\r\n            type=\"button\">\r\n            <mat-icon\r\n                class=\"material-icons\">close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\"\r\n        *ngIf=\"isLoading$ | async\">\r\n    </mat-progress-bar>\r\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\">\r\n    </div>\r\n    <div mat-dialog-content class=\"flex flex-col\">\r\n        <div\r\n            class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n            <mat-form-field class=\"mat-block flex-1\">\r\n                <mat-label>Device Name</mat-label>\r\n                <input matInput formControlName=\"entityName\"\r\n                    required readonly=\"\">\r\n            </mat-form-field>\r\n        </div>\r\n        <div class=\"relations-list\">\r\n            <div class=\"mat-body-1\"\r\n                style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">\r\n                NEW ROOMS</div>\r\n            <div class=\"body\"\r\n                [class.!hidden]=\"!relations().length\">\r\n                <div class=\"row flex flex-row items-center justify-start\"\r\n                    formArrayName=\"relations\"\r\n                    *ngFor=\"let relation of relations().controls; let i = index;\">\r\n                    <div [formGroupName]=\"i\"\r\n                        class=\"mat-elevation-z2 flex flex-1 flex-row\"\r\n                        style=\"padding: 5px 0 5px 5px;\">\r\n                        <div class=\"flex flex-1 flex-col\">\r\n                            <div\r\n                                class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n                                <mat-form-field    *ngIf=\"false\"\r\n                                    class=\"mat-block\"\r\n                                    style=\"min-width: 100px;\">\r\n                                    <mat-label>Direction</mat-label>\r\n                                    <input matInput\r\n                                        formControlName=\"direction\"\r\n                                        readonly>\r\n                                </mat-form-field>\r\n                                <mat-form-field    *ngIf=\"false\"\r\n                                    class=\"mat-block flex-1\">\r\n                                    <mat-label>Relation\r\n                                        Type</mat-label>\r\n                                    <input matInput\r\n                                        formControlName=\"relationType\"\r\n                                        readonly>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div\r\n                                class=\"flex flex-row xs:flex-col\">\r\n                                <tb-entity-select\r\n                                    class=\"mat-block flex-1\"\r\n                                    [required]=\"true\"\r\n                                    [showLabel]=\"false\"\r\n                                    formControlName=\"relatedEntity\"\r\n                                    [allowedEntityTypes]=\"['ASSET']\">\r\n                                </tb-entity-select>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            class=\"flex flex-col items-center justify-center\">\r\n                            <button mat-icon-button\r\n                                color=\"primary\"\r\n                                aria-label=\"Remove\"\r\n                                type=\"button\"\r\n                                (click)=\"removeRelation(i)\"\r\n                                matTooltip=\"Remove relation\"\r\n                                matTooltipPosition=\"above\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button mat-raised-button color=\"primary\"\r\n                    type=\"button\" (click)=\"addRelation()\"\r\n                    matTooltip=\"Add Relation\"\r\n                    matTooltipPosition=\"above\">\r\n                    Add\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-actions\r\n        class=\"flex flex-row items-center justify-end\">\r\n        <button mat-button color=\"primary\" type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n            Cancel\r\n        </button>\r\n        <button mat-button mat-raised-button color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\r\n            Save\r\n        </button>\r\n    </div>\r\n</form>",
                "customCss" : ".edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n/*tb-entity-select .mat-form-field-label {*/\n  /*visibility: hidden; */\n/*}*/\n/*tb-entity-select::before {*/\n/*  content: \"Room\";*/\n/*  visibility: visible;*/\n/*  color: rgba(0,0,0,0.6);*/\n/*  font-size: 12px;*/\n/*  position: absolute;*/\n/*  top: -8px;*/\n/*  left: 12px;*/\n/*}*/",
                "customFunction" : "\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.entitySearchDirection = {\n        // from: \"FROM\",\n        to: \"TO\"\n    };\n    vm.attributes = {};\n    vm.oldRelationsData = [];\n    vm.relationsToDelete = [];\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityType: [null],\n        entityLabel: [null],\n        // type: ['', [vm.validators.required]],\n        attributes: vm.fb.group({}),\n        oldRelations: vm.fb.array([]),\n        relations: vm.fb.array([])\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.relations = function() {\n        return vm.editEntityFormGroup.get('relations'); \n    };\n\n    vm.oldRelations = function() {\n        return vm.editEntityFormGroup.get('oldRelations');\n    };\n\n    vm.addRelation = function() {\n        vm.relations().push(vm.fb.group({\n            relatedEntity: [ { entityType: 'ASSET', id: null }, [vm.validators.required] ],\n            relationType: [\"Asset\"],\n            direction: [{value: \"TO\", disabled: true}]\n        }));\n    };\n    \n    function addOldRelation() {\n        vm.oldRelations().push(vm.fb.group({\n            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n            relationType: [{value: \"Asset\", disabled: true}, [vm.validators.required]],\n            direction: [{value: null, disabled: true}, [vm.validators.required]]\n        }));\n    }\n\n    vm.removeRelation = function(index) {\n        vm.relations().removeAt(index);\n        vm.relations().markAsDirty();\n    };\n\n    vm.removeOldRelation = function(index, relation) {\n        vm.oldRelations().removeAt(index);\n        vm.relationsToDelete.push(relation);\n        vm.oldRelations().markAsDirty();\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveRelations(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n    function getEntityRelations(relations) {\n        let relationsFrom = relations[0];\n        let relationsTo = relations[1];\n        for (let i=0; i < relationsFrom.length; i++) {\n            let relation = {\n                direction: 'FROM',\n                relationType: relationsFrom[i].type,\n                relatedEntity: relationsFrom[i].to\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n        for (let i=0; i < relationsTo.length; i++) {\n            let relation = {\n                direction: 'TO',\n                relationType: relationsTo[i].type,\n                relatedEntity: relationsTo[i].from\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n    }\n    \n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            entityRelationService.findInfoByFrom(entityId),\n            entityRelationService.findInfoByTo(entityId),\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n            entityService.getEntity(entityId.entityType, entityId.id)\n        ]).subscribe(\n            function (data) {\n                getEntityRelations(data.slice(0,2));\n                getEntityAttributes(data[2]);\n                vm.entity = data[3];\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entity.name,\n                    entityType: vm.entityType,\n                    entityLabel: vm.entity.label,\n                    type: vm.entity.type,\n                    attributes: vm.attributes,\n                    oldRelations: vm.oldRelationsData\n                }, {emitEvent: false});\n    \n                vm.addRelation();\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        if (vm.entity.label !== formValues.entityLabel){\n            vm.entity.label = formValues.entityLabel;\n            if (formValues.entityType == 'ASSET') {\n                return assetService.saveAsset(vm.entity);\n            } else if (formValues.entityType == 'DEVICE') {\n                return deviceService.saveDevice(vm.entity);\n            }\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveRelations(entityId) {\n        let relations = vm.editEntityFormGroup.get('relations').value;\n        let tasks = [];\n        for(let i=0; i < relations.length; i++) {\n            let relation = {\n                type: relations[i].relationType,\n                typeGroup: 'COMMON'\n            };\n            if (relations[i].direction == 'FROM') {\n                relation.to = relations[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = relations[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.saveRelation(relation));\n        }\n        for (let i=0; i < vm.relationsToDelete.length; i++) {\n            let relation = {\n                type: vm.relationsToDelete[i].relationType\n            };\n            if (vm.relationsToDelete[i].direction == 'FROM') {\n                relation.to = vm.relationsToDelete[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = vm.relationsToDelete[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n        }\n        if (tasks.length > 0) {\n            return widgetContext.rxjs.forkJoin(tasks);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a055fd6a-16a7-24ed-010b-703cd3604eb5"
              }, {
                "name" : "user",
                "icon" : "warning",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editZoneForm=\"ngForm\" [formGroup]=\"editResidentFormGroup\"\n      (ngSubmit)=\"save()\" class=\"al-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit resident '{{ entityName }}'</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content>\n        <section fxLayout=\"column\" fxLayoutGap=\"24px\">\n            <section fxLayout=\"row\" fxLayoutGap=\"40px\">\n                <div class=\"al-section-title\">Personal info</div>\n                <section fxFlex fxLayout=\"column\">\n                    <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                        <mat-label>Email</mat-label>\n                        <input matInput formControlName=\"email\" required>\n                        <mat-error *ngIf=\"editResidentFormGroup.get('email').hasError('email')\">\n                            Invalid email format.\n                        </mat-error>\n                        <mat-error *ngIf=\"editResidentFormGroup.get('email').hasError('required')\">\n                            Email is required.\n                        </mat-error>\n                    </mat-form-field>\n                    <section fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\">\n                        <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                            <mat-label>First name</mat-label>\n                            <input matInput formControlName=\"firstName\" required>\n                            <mat-error *ngIf=\"editResidentFormGroup.get('firstName').hasError('required')\">\n                                First name is required.\n                            </mat-error>\n                        </mat-form-field>\n                        <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                            <mat-label>Last name</mat-label>\n                            <input matInput formControlName=\"lastName\" required>\n                            <mat-error *ngIf=\"editResidentFormGroup.get('lastName').hasError('required')\">\n                                Last name is required.\n                            </mat-error>\n                        </mat-form-field>\n                    </section>\n                    <section fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\">\n                        <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                          <mat-label>Gender</mat-label>\n                          <mat-select matInput formControlName=\"gender\" panelClass=\"al-form\">\n                            <mat-option *ngFor=\"let gender of genders\" [value]=\"gender\">\n                              {{ gender }}\n                            </mat-option>\n                          </mat-select>\n                        </mat-form-field>\n                        <tb-phone-input fxFlex\n                            appearance=\"fill\"\n                            [required]=\"false\"\n                            formControlName=\"phoneNumber\"\n                            [enableFlagsSelect]=\"false\"\n                            label=\"Phone number\">\n                        </tb-phone-input>\n                    </section>\n                    <section fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\">\n                        <mat-form-field fxFlex=\"50\" appearance=\"fill\" class=\"mat-block\">\n                            <mat-label>Birth</mat-label>\n                            <mat-datetimepicker-toggle [for]=\"birthDatePicker\" matPrefix></mat-datetimepicker-toggle>\n                            <mat-datetimepicker #birthDatePicker type=\"date\" startView=\"multi-year\" openOnFocus=\"true\"></mat-datetimepicker>\n                            <input matInput formControlName=\"birthdate\" [matDatetimepicker]=\"birthDatePicker\">\n                        </mat-form-field>\n                    </section>    \n                    <tb-image-input formControlName=\"photo\" label=\"Photo\" noImageText=\"No photo selected\" required></tb-image-input>\n                </section>\n            </section>\n            <mat-divider></mat-divider>\n            <section fxLayout=\"row\" fxLayoutGap=\"40px\">\n                <div class=\"al-section-title\">Emergency contact</div>\n                <section fxFlex fxLayout=\"column\">\n                    <section fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\">\n                        <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                            <mat-label>First name</mat-label>\n                            <input matInput formControlName=\"emergencyFirstname\">\n                        </mat-form-field>\n                        <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                            <mat-label>Last name</mat-label>\n                            <input matInput formControlName=\"emergencyLastname\">\n                        </mat-form-field>\n                    </section>\n                    <section fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\">\n                        <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                            <mat-label>Role</mat-label>\n                            <input matInput formControlName=\"emergencyRole\">\n                        </mat-form-field>\n                        <tb-phone-input fxFlex\n                            appearance=\"fill\"\n                            [required]=\"false\"\n                            formControlName=\"emergencyPhoneNumber\"\n                            [enableFlagsSelect]=\"false\"\n                            label=\"Phone number\">\n                        </tb-phone-input>\n                    </section>\n                </section>    \n            </section>    \n            <mat-divider></mat-divider>\n            <section fxLayout=\"row\" fxLayoutGap=\"40px\">\n                <div class=\"al-section-title\">Health information</div>\n                <section fxFlex fxLayout=\"column\">\n                    <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                        <mat-label>Chromic diseases</mat-label>\n                        <input matInput formControlName=\"chronicDiseases\">\n                    </mat-form-field>\n                    <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                        <mat-label>Allergy</mat-label>\n                        <input matInput formControlName=\"allergy\">\n                    </mat-form-field>\n                </section>    \n            </section>\n            <mat-divider></mat-divider>\n            <section fxLayout=\"row\" fxLayoutGap=\"40px\">\n                <div class=\"al-section-title\">Location</div>\n                <section fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\">\n                    <mat-form-field fxFlex=\"50\" appearance=\"fill\" class=\"mat-block\">\n                      <mat-label>Zone</mat-label>\n                      <mat-select matInput formControlName=\"zone\" required panelClass=\"al-form\" [compareWith]=\"entityComparisonFunction\">\n                        <mat-option *ngFor=\"let zone of zones$ | async\" [value]=\"zone\">\n                          {{ zone.name }}\n                        </mat-option>\n                      </mat-select>\n                      <mat-error *ngIf=\"editResidentFormGroup.get('zone').hasError('required')\">\n                          Zone is required.\n                      </mat-error>\n                    </mat-form-field>\n                    <mat-form-field [fxShow]=\"editResidentFormGroup.get('zone').value\" fxFlex=\"50\" appearance=\"fill\" floatLabel=\"always\" class=\"mat-block\">\n                      <mat-label>Room</mat-label>\n                      <mat-select matInput formControlName=\"room\" required panelClass=\"al-form\" [compareWith]=\"entityComparisonFunction\" \n                        [placeholder]=\"(rooms$ | async)?.length ? 'Please select room' : 'No rooms available in selected zone'\">\n                        <mat-option *ngFor=\"let room of rooms$ | async\" [value]=\"room\">\n                          {{ room.name }}\n                        </mat-option>\n                      </mat-select>\n                      <mat-error *ngIf=\"editResidentFormGroup.get('room').hasError('required')\">\n                          Room is required.\n                      </mat-error>\n                    </mat-form-field>\n                </section>    \n            </section>\n            <mat-divider></mat-divider>\n            <section fxLayout=\"row\" fxLayoutGap=\"40px\">\n                <div class=\"al-section-title\">Wristband</div>\n                <mat-form-field fxFlex appearance=\"fill\" class=\"mat-block\">\n                  <mat-label>Assigned wristband</mat-label>\n                  <mat-select matInput formControlName=\"wristband\" required panelClass=\"al-form\" [compareWith]=\"entityComparisonFunction\">\n                    <mat-option *ngFor=\"let wristband of wristbands$ | async\" [value]=\"wristband\">\n                      {{ wristband.name }}\n                    </mat-option>\n                  </mat-select>\n                  <mat-error *ngIf=\"editResidentFormGroup.get('wristband').hasError('required')\">\n                      Wristband is required.\n                  </mat-error>\n                </mat-form-field>\n            </section>    \n        </section>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editResidentFormGroup.invalid || !editResidentFormGroup.dirty\">\n            Save\n        </button>\n    </div>\n</form>\n",
                "customCss" : ".al-form {\n    width: 840px;\n}\n\n.al-form .mat-mdc-dialog-content {\n    max-height: 80vh;\n}\n\n.al-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.al-form .mat-mdc-button.mat-primary:not(:disabled), .al-form .mat-mdc-icon-button.mat-primary:not(:disabled), .al-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #4B535B;\n}\n\n.al-form .mat-mdc-fab.mat-primary:not(:disabled), .al-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .al-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .al-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.al-form .mat-mdc-fab.mat-primary:not(:disabled), .al-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .al-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .al-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .al-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .al-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .al-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #4B535B;\n}\n\n.al-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #3E3AE3 !important;\n}\n\n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background-color: rgba(111, 116, 242, 0.54) !important;\n}\n\n\n.al-form .mat-icon {\n    color: #9FA6B4;\n}\n\n.al-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #9FA6B4;\n    padding-bottom: 8px;\n}\n\n.al-form .mat-button-toggle-group-appearance-standard, .al-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.al-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.al-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.al-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.al-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.al-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.al-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #4B535B;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.al-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.al-form .mat-mdc-slider .mdc-slider__value-indicator,\n.al-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.al-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.al-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #3E3AE3;\n}\n\n\n.al-form .al-section-title {\n    width: 140px;\n    padding: 20px 0px;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 18px;\n    color: #29313C;\n}\n\n.al-form .mdc-text-field--filled:not(.mdc-text-field--disabled) {\n    background: #F3F6FA;\n}\n\n.al-form .mdc-text-field--filled {\n    border-radius: 6px 6px 0px 0px;\n}\n\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenEditResidentDialog();\n\nfunction openEditResidentDialog() {\n    customDialog.customDialog(htmlTemplate, EditResidentDialogController).subscribe();\n}\n\nfunction EditResidentDialogController(instance) {\n    let vm = instance;\n    \n    vm.customerId = null;\n    \n    const phoneNumberPattern = /^\\+[1-9]\\d{1,14}$/;\n    \n    vm.entityName = entityName;\n    vm.entityId = entityId;\n\n    vm.widgetContext = widgetContext;\n    vm.resident = null;\n    vm.zone = null;\n    vm.room = null;\n    vm.wristband = null;\n    \n    vm.editResidentFormGroup = vm.fb.group({\n      email: ['', [vm.validators.required, vm.validators.email]],\n      firstName: ['', [vm.validators.required]],\n      lastName: ['', [vm.validators.required]],\n      gender: [null],\n      phoneNumber: [null, [vm.validators.pattern(phoneNumberPattern)]],\n      birthdate: [null],\n      photo: [null, [vm.validators.required]],\n      emergencyFirstname: [''],\n      emergencyLastname: [''],\n      emergencyRole: [''],\n      emergencyPhoneNumber: [null, [vm.validators.pattern(phoneNumberPattern)]],\n      chronicDiseases: [''],\n      allergy: [''],\n      zone: [null, [vm.validators.required]],\n      room: [null, [vm.validators.required]],\n      wristband: [null, [vm.validators.required]]\n    });\n    \n    vm.genders = ['Male', 'Female'];\n    \n    vm.zones$ = getCustomerId().pipe(\n        widgetContext.rxjs.tap((customerId) => {\n            vm.customerId = customerId;\n        }),\n        widgetContext.rxjs.switchMap((ownerId) => {\n            var query = {\n                parameters: {\n                    rootId: ownerId.id,\n                    rootType: ownerId.entityType,\n                    direction: 'FROM',\n                    maxLevel: 1\n                },\n                relationType: 'Contains',\n                assetTypes: ['AL_Zone']\n            };\n            return assetService.findByQuery(query).pipe(\n                widgetContext.rxjs.map((zones) => {\n                    return zones.sort((z1, z2) => z1.name.localeCompare(z2.name));\n                })\n            );\n        }),\n        widgetContext.rxjs.share()\n    );\n    \n    vm.rooms$ = vm.editResidentFormGroup.get('zone').valueChanges.pipe(\n        widgetContext.rxjs.tap(() => {\n            vm.editResidentFormGroup.get('room').patchValue(null);\n        }),\n        widgetContext.rxjs.switchMap((zone) => {\n            if (zone) {\n                var query = {\n                    parameters: {\n                        rootId: zone.id.id,\n                        rootType: zone.id.entityType,\n                        direction: 'FROM',\n                        maxLevel: 1\n                    },\n                    relationType: 'Contains',\n                    assetTypes: ['AL_Room']\n                };\n                return assetService.findByQuery(query).pipe(\n                    widgetContext.rxjs.map((rooms) => {\n                        return rooms.sort((r1, r2) => r1.name.localeCompare(r2.name));\n                    })\n                );\n            } else {\n                return widgetContext.rxjs.of([]);\n            }\n        }),\n        widgetContext.rxjs.share()\n    );\n    \n    vm.wristbands$ = getCustomerId().pipe(\n        widgetContext.rxjs.switchMap((ownerId) => {\n           return getAvailableWristbands(ownerId);\n        }),\n        widgetContext.rxjs.share()\n    );\n\n    vm.entityComparisonFunction = function( option, value ) {\n        if (!option || !value) {\n            return option === value;\n        } else {\n            return option.id.id === value.id.id;\n        }\n    }\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editResidentFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveResident(),\n            saveRelations(entityId),\n            saveAttributes(entityId)\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    loadResident();\n\n    function saveResident() {\n        const formValues = vm.editResidentFormGroup.value;\n        vm.resident.email = formValues.email;\n        vm.resident.firstName = formValues.firstName;\n        vm.resident.lastName = formValues.lastName;\n        return userService.saveUser(vm.resident);\n    }\n    \n    function saveRelations(entityId) {\n        let tasks = [];\n        let room = vm.editResidentFormGroup.get('room').value;\n        if (vm.room.id.id !== room.id.id) {\n            let newRoomRelation = {\n                type: 'Contains',\n                typeGroup: 'COMMON',\n                from: room.id,\n                to: entityId\n            };\n            tasks.push([\n                    entityRelationService.deleteRelation(vm.room.id, 'Contains', entityId),\n                    entityRelationService.saveRelation(newRoomRelation)\n            ]);\n        }\n        let wristband = vm.editResidentFormGroup.get('wristband').value;\n        if (vm.wristband === null || vm.wristband.id.id !== wristband.id.id) {\n            if (vm.wristband !== null) {\n                tasks.push(unassignWristband(entityId, vm.wristband.id));\n            }\n            tasks.push(assignWristband(entityId, wristband.id));\n        }\n        if (tasks.length) {\n            return widgetContext.rxjs.forkJoin(tasks);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n\n    function saveAttributes(entityId) {\n        let photo = vm.editResidentFormGroup.get('photo').value;\n        let zone = vm.editResidentFormGroup.get('zone').value;\n        let room = vm.editResidentFormGroup.get('room').value;\n        let gender = vm.editResidentFormGroup.get('gender').value;\n        let phoneNumber = vm.editResidentFormGroup.get('phoneNumber').value;\n        let birthdate = vm.editResidentFormGroup.get('birthdate').value;\n        if (birthdate) {\n            birthdate = birthdate.getTime();\n        } else {\n            birthdate = null;\n        }\n        let emergencyFirstname = vm.editResidentFormGroup.get('emergencyFirstname').value;\n        let emergencyLastname = vm.editResidentFormGroup.get('emergencyLastname').value;\n        let emergencyRole = vm.editResidentFormGroup.get('emergencyRole').value;\n        let emergencyPhoneNumber = vm.editResidentFormGroup.get('emergencyPhoneNumber').value;\n        let chronicDiseases = vm.editResidentFormGroup.get('chronicDiseases').value;\n        let allergy = vm.editResidentFormGroup.get('allergy').value;\n        \n        let attributesArray = [\n            {key: 'photo', value: photo},\n            {key: 'zone', value: zone.name},\n            {key: 'room', value: room.name},\n            {key: 'gender', value: gender},\n            {key: 'phoneNumber', value: phoneNumber},\n            {key: 'birthdate', value: birthdate},\n            {key: 'emergencyFirstname', value: emergencyFirstname},\n            {key: 'emergencyLastname', value: emergencyLastname},\n            {key: 'emergencyRole', value: emergencyRole},\n            {key: 'emergencyPhoneNumber', value: emergencyPhoneNumber},\n            {key: 'chronicDiseases', value: chronicDiseases},\n            {key: 'allergy', value: allergy}\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function unassignWristband(entityId, wristbandId) {\n        return deviceService.getDevice(wristbandId.id).pipe(\n            widgetContext.rxjs.switchMap((wristband) => {\n                return getAssignedUnassignedDeviceGroupIds().pipe(\n                    widgetContext.rxjs.switchMap((groupIds) => {\n                        wristband.label = '';\n                        return widgetContext.rxjs.forkJoin([\n                            deviceService.saveDevice(wristband),\n                            entityRelationService.deleteRelation(entityId, 'Use', wristbandId),\n                            entityGroupService.removeEntityFromEntityGroup(groupIds.assignedGroupId, wristbandId.id),\n                            entityGroupService.addEntityToEntityGroup(groupIds.unassignedGroupId, wristbandId.id)\n                        ]);\n                    })\n                );\n            })\n        );\n    }\n    \n    function assignWristband(entityId, wristbandId) {\n        let newWristbandRelation = {\n            type: 'Use',\n            typeGroup: 'COMMON',\n            from: entityId,\n            to: wristbandId\n        };\n        return deviceService.getDevice(wristbandId.id).pipe(\n            widgetContext.rxjs.switchMap((wristband) => {\n                return getAssignedUnassignedDeviceGroupIds().pipe(\n                    widgetContext.rxjs.switchMap((groupIds) => {\n                        wristband.label = vm.resident.firstName + ' ' + vm.resident.lastName;\n                        return widgetContext.rxjs.forkJoin([\n                            deviceService.saveDevice(wristband),\n                            entityRelationService.saveRelation(newWristbandRelation),\n                            entityGroupService.removeEntityFromEntityGroup(groupIds.unassignedGroupId, wristbandId.id),\n                            entityGroupService.addEntityToEntityGroup(groupIds.assignedGroupId, wristbandId.id)\n                        ]);\n                    })\n                );\n            })\n        );\n    }\n    \n    function getAssignedUnassignedDeviceGroupIds() {\n        return widgetContext.rxjs.forkJoin([\n            getOrCreateEntityGroup(vm.customerId, 'DEVICE', 'Unassigned Devices'),\n            getOrCreateEntityGroup(vm.customerId, 'DEVICE', 'Assigned Devices')\n        ]).pipe(\n            widgetContext.rxjs.map((groups) => {\n              return { unassignedGroupId: groups[0].id.id, assignedGroupId: groups[1].id.id };\n            })\n        );\n    }\n    \n    function loadResident() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', \n                [\n                    'photo',\n                    'gender',\n                    'phoneNumber',\n                    'birthdate',\n                    'emergencyFirstname',\n                    'emergencyLastname',\n                    'emergencyRole',\n                    'emergencyPhoneNumber',\n                    'chronicDiseases',\n                    'allergy'\n                ]\n            ),\n            loadResidentLocation(),\n            loadResidentWristband(),\n            userService.getUser(entityId.id)\n        ]).subscribe(\n            function (data) {\n                var attributes = data[0];\n                \n                vm.editResidentFormGroup.get('photo').patchValue(getAttributeValue(attributes, 'photo', null), {emitEvent: false});\n                vm.editResidentFormGroup.get('gender').patchValue(getAttributeValue(attributes, 'gender', null), {emitEvent: false});\n                vm.editResidentFormGroup.get('phoneNumber').patchValue(getAttributeValue(attributes, 'phoneNumber', null), {emitEvent: false});\n                let birthdate = getAttributeValue(attributes, 'birthdate', null);\n                if (birthdate) {\n                    birthdate = new Date(birthdate);\n                }\n                vm.editResidentFormGroup.get('birthdate').patchValue(birthdate, {emitEvent: false});\n                vm.editResidentFormGroup.get('emergencyFirstname').patchValue(getAttributeValue(attributes, 'emergencyFirstname', ''), {emitEvent: false});\n                vm.editResidentFormGroup.get('emergencyLastname').patchValue(getAttributeValue(attributes, 'emergencyLastname', ''), {emitEvent: false});\n                vm.editResidentFormGroup.get('emergencyRole').patchValue(getAttributeValue(attributes, 'emergencyRole', ''), {emitEvent: false});\n                vm.editResidentFormGroup.get('emergencyPhoneNumber').patchValue(getAttributeValue(attributes, 'emergencyPhoneNumber', null), {emitEvent: false});\n                vm.editResidentFormGroup.get('chronicDiseases').patchValue(getAttributeValue(attributes, 'chronicDiseases', ''), {emitEvent: false});\n                vm.editResidentFormGroup.get('allergy').patchValue(getAttributeValue(attributes, 'allergy', ''), {emitEvent: false});\n                \n                vm.zone = data[1][0];\n                vm.room = data[1][1];\n                vm.editResidentFormGroup.get('zone').patchValue(vm.zone);\n                vm.editResidentFormGroup.get('room').patchValue(vm.room, {emitEvent: false});\n                \n                vm.wristband = data[2];\n                vm.editResidentFormGroup.get('wristband').patchValue(vm.wristband, {emitEvent: false});\n                \n                vm.resident = data[3];\n                vm.editResidentFormGroup.get('email').patchValue(vm.resident.email, {emitEvent: false});\n                vm.editResidentFormGroup.get('firstName').patchValue(vm.resident.firstName, {emitEvent: false});\n                vm.editResidentFormGroup.get('lastName').patchValue(vm.resident.lastName, {emitEvent: false});\n            }\n        );\n    }\n    \n    function getAttributeValue(attributes, key, defaultValue) {\n        let value = null;\n        let found = attributes.filter((attribute) => attribute.key === key);\n        if (found.length) {\n            value = found[0].value;\n        }\n        if (value === null || value === '') {\n            value = defaultValue;\n        }\n        return value;\n    }\n    \n    function loadResidentLocation() {\n        var roomQuery = {\n            parameters: {\n                rootId: entityId.id,\n                rootType: entityId.entityType,\n                direction: 'TO',\n                maxLevel: 1\n            },\n            relationType: 'Contains',\n            assetTypes: ['AL_Room']\n        };\n        return assetService.findByQuery(roomQuery).pipe(\n            widgetContext.rxjs.switchMap((rooms) => {\n                let room = rooms[0];\n                var zoneQuery = {\n                    parameters: {\n                        rootId: room.id.id,\n                        rootType: room.id.entityType,\n                        direction: 'TO',\n                        maxLevel: 1\n                    },\n                    relationType: 'Contains',\n                    assetTypes: ['AL_Zone']\n                };\n                return assetService.findByQuery(zoneQuery).pipe(\n                    widgetContext.rxjs.switchMap((zones) => {\n                        let zone = zones[0];\n                        return widgetContext.rxjs.of([zone, room]);\n                    })\n                );\n            })\n        );\n    }\n    \n    function loadResidentWristband() {\n        var wristbandQuery = {\n            parameters: {\n                rootId: entityId.id,\n                rootType: entityId.entityType,\n                direction: 'FROM',\n                maxLevel: 1\n            },\n            relationType: 'Use',\n            deviceTypes: ['AL_Wristband']\n        };\n        return deviceService.findByQuery(wristbandQuery).pipe(\n            widgetContext.rxjs.map((wristbands) => {\n                if (wristbands.length) {\n                    let wristband = wristbands[0];\n                    return {id: wristband.id, name: wristband.name };\n                } else {\n                    return null;\n                }\n            })\n        );\n    }\n    \n    function getAvailableWristbands(ownerId) {\n        const query = {\n            pageLink: {\n                pageSize: 100,\n                page: 0\n            },\n            entityFields: [\n                {\n                    type: 'ENTITY_FIELD',\n                    key: 'name'\n                }\n            ],\n            entityFilter: {\n                type: 'entitiesByGroupName',\n                groupType: 'DEVICE',\n                ownerId: ownerId,\n                entityGroupNameFilter: 'Unassigned Devices'\n            },\n            keyFilters: [\n                {\n                    key: {\n                        type: 'ENTITY_FIELD',\n                        key: 'type'\n                    },\n                    valueType: 'STRING',\n                    predicate: {\n                        type: 'STRING',\n                        operation: 'EQUAL',\n                        value: { defaultValue: 'AL_Wristband'},\n                        ignoreCase: false\n                    }\n                }\n            ]\n        };\n        return entityService.findEntityDataByQuery(query).pipe(\n            widgetContext.rxjs.switchMap((pageData) => {\n                const wristbands = convertEntityPageDataToNameIdPairs(pageData);\n                return loadResidentWristband().pipe(\n                    widgetContext.rxjs.map((wristband) => {\n                        if (wristband != null) {\n                            wristbands.push(wristband);\n                        }\n                        wristbands.sort((w1, w2) => w1.name.localeCompare(w2.name));\n                        return wristbands;\n                    })\n                );\n            })\n        );\n    }\n    \n    function convertEntityPageDataToNameIdPairs(pageData) {\n        return pageData.data.map((entityData) => {\n            return convertEntityDataToNameIdPair(entityData);\n        });\n    }\n    \n    function convertEntityDataToNameIdPair(entityData) {\n        return {\n            id: entityData.entityId,\n            name: entityData.latest['ENTITY_FIELD']['name'].value\n        };\n    }\n    \n    function getOrCreateEntityGroup(ownerId, type, name) {\n      return getEntityGroupByName(ownerId, name, type).pipe(\n          widgetContext.rxjs.switchMap((group) => {\n              if (group) {\n                  return widgetContext.rxjs.of(group);\n              } else {\n                  var newGroup = {\n                    type: type,\n                    name: name,\n                    ownerId: ownerId\n                  };\n                  return entityGroupService.saveEntityGroup(newGroup);\n              }\n          })\n      );\n    }\n    \n    function getEntityGroupByName(ownerId, groupName, groupType) {\n      var entityGroupsPageLink = widgetContext.pageLink(10, 0, groupName);\n      return entityGroupService.getEntityGroupsByOwnerIdAndPageLink(ownerId.entityType, ownerId.id, groupType, entityGroupsPageLink, {ignoreLoading: true}).pipe(\n          widgetContext.rxjs.map((data) => {\n            if (data.data.length) {\n                return data.data.find((group) => group.name === groupName);\n            } else {\n                return null;\n            }\n          })\n      );\n    }\n        \n    \n    function getCustomerId() {\n        const customerAliasId = widgetContext.aliasController.getEntityAliasId('Customer');\n        return widgetContext.aliasController.getAliasInfo(customerAliasId).pipe(\n            widgetContext.rxjs.map((info) => {\n              return {id: info.currentEntity.id, entityType: info.currentEntity.entityType};  \n            })\n        );\n    }\n\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "c51e7390-4099-50ab-4055-4c01292f5523"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "eaa1a76a-7afb-2ea4-d584-8fbb4d8836df"
        },
        "0feb893f-e24f-3092-37ff-24af73320f34" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "0cf2a65b-ec3a-1fd3-c4a5-d9192b64284f",
              "dataKeys" : [ {
                "name" : "deviceId",
                "type" : "attribute",
                "label" : "deviceId",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.48928695843313164
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1759197037632,
                  "endTimeMs" : 1759283437632
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <div class='content'>\n        <div class='column'>\n            <h1>${entityName}</h1>\n            <div class='value'>\n                ${deviceId}\n            </div>    \n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 2px solid #ccc;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px;\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: space-around;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .content .column {\n   display: flex;\n   flex-direction: column;    \n   justify-content: space-around;\n   height: 100%;\n}\n\n.card h1 {\n    text-transform: uppercase;\n    color: #999;\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 10px;\n    line-height: 32px;\n}\n\n.card .value {\n    font-size: 38px;\n    font-weight: 200;\n}\n\n.card .description {\n    font-size: 20px;\n    color: #999;\n}\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "0feb893f-e24f-3092-37ff-24af73320f34"
        },
        "3345cc85-1b48-a181-4b11-4c1ac35db68b" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1759196698542,
                  "endTimeMs" : 1759283098542
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "LIST ASSET USERS",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "entityNameColumnTitle" : "",
              "displayEntityLabel" : false,
              "entityLabelColumnTitle" : "",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "pageStepCount" : 3,
              "pageStepIncrement" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "6d8efa56-9a7a-2ca4-edfb-1dbb0731957d",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.7489336761614557
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "rowClick" : [ ],
              "actionCellButton" : [ {
                "name" : "current",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "current_device",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "2a1bd994-c551-b808-7fb3-7d793e903a27"
              }, {
                "name" : "room",
                "icon" : "chair",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\"\r\n    [formGroup]=\"editEntityFormGroup\" (ngSubmit)=\"save()\"\r\n    class=\"edit-entity-form\">\r\n    <mat-toolbar class=\"flex flex-row\" color=\"primary\">\r\n        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}\r\n        </h2>\r\n        <span class=\"flex-1\"></span>\r\n        <button mat-icon-button (click)=\"cancel()\"\r\n            type=\"button\">\r\n            <mat-icon\r\n                class=\"material-icons\">close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\"\r\n        *ngIf=\"isLoading$ | async\">\r\n    </mat-progress-bar>\r\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\">\r\n    </div>\r\n    <div mat-dialog-content class=\"flex flex-col\">\r\n        <div\r\n            class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n            <mat-form-field class=\"mat-block flex-1\">\r\n                <mat-label>Device Name</mat-label>\r\n                <input matInput formControlName=\"entityName\"\r\n                    required readonly=\"\">\r\n            </mat-form-field>\r\n        </div>\r\n        <div class=\"relations-list\">\r\n            <div class=\"mat-body-1\"\r\n                style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">\r\n                NEW ROOMS</div>\r\n            <div class=\"body\"\r\n                [class.!hidden]=\"!relations().length\">\r\n                <div class=\"row flex flex-row items-center justify-start\"\r\n                    formArrayName=\"relations\"\r\n                    *ngFor=\"let relation of relations().controls; let i = index;\">\r\n                    <div [formGroupName]=\"i\"\r\n                        class=\"mat-elevation-z2 flex flex-1 flex-row\"\r\n                        style=\"padding: 5px 0 5px 5px;\">\r\n                        <div class=\"flex flex-1 flex-col\">\r\n                            <div\r\n                                class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n                                <mat-form-field    *ngIf=\"false\"\r\n                                    class=\"mat-block\"\r\n                                    style=\"min-width: 100px;\">\r\n                                    <mat-label>Direction</mat-label>\r\n                                    <input matInput\r\n                                        formControlName=\"direction\"\r\n                                        readonly>\r\n                                </mat-form-field>\r\n                                <mat-form-field    *ngIf=\"false\"\r\n                                    class=\"mat-block flex-1\">\r\n                                    <mat-label>Relation\r\n                                        Type</mat-label>\r\n                                    <input matInput\r\n                                        formControlName=\"relationType\"\r\n                                        readonly>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div\r\n                                class=\"flex flex-row xs:flex-col\">\r\n                                <tb-entity-select\r\n                                    class=\"mat-block flex-1\"\r\n                                    [required]=\"true\"\r\n                                    [showLabel]=\"false\"\r\n                                    formControlName=\"relatedEntity\"\r\n                                    [allowedEntityTypes]=\"['ASSET']\">\r\n                                </tb-entity-select>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            class=\"flex flex-col items-center justify-center\">\r\n                            <button mat-icon-button\r\n                                color=\"primary\"\r\n                                aria-label=\"Remove\"\r\n                                type=\"button\"\r\n                                (click)=\"removeRelation(i)\"\r\n                                matTooltip=\"Remove relation\"\r\n                                matTooltipPosition=\"above\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button mat-raised-button color=\"primary\"\r\n                    type=\"button\" (click)=\"addRelation()\"\r\n                    matTooltip=\"Add Relation\"\r\n                    matTooltipPosition=\"above\">\r\n                    Add\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-actions\r\n        class=\"flex flex-row items-center justify-end\">\r\n        <button mat-button color=\"primary\" type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n            Cancel\r\n        </button>\r\n        <button mat-button mat-raised-button color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\r\n            Save\r\n        </button>\r\n    </div>\r\n</form>",
                "customCss" : ".edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n/*tb-entity-select .mat-form-field-label {*/\n  /*visibility: hidden; */\n/*}*/\n/*tb-entity-select::before {*/\n/*  content: \"Room\";*/\n/*  visibility: visible;*/\n/*  color: rgba(0,0,0,0.6);*/\n/*  font-size: 12px;*/\n/*  position: absolute;*/\n/*  top: -8px;*/\n/*  left: 12px;*/\n/*}*/",
                "customFunction" : "\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.entitySearchDirection = {\n        // from: \"FROM\",\n        to: \"TO\"\n    };\n    vm.attributes = {};\n    vm.oldRelationsData = [];\n    vm.relationsToDelete = [];\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityType: [null],\n        entityLabel: [null],\n        // type: ['', [vm.validators.required]],\n        attributes: vm.fb.group({}),\n        oldRelations: vm.fb.array([]),\n        relations: vm.fb.array([])\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.relations = function() {\n        return vm.editEntityFormGroup.get('relations'); \n    };\n\n    vm.oldRelations = function() {\n        return vm.editEntityFormGroup.get('oldRelations');\n    };\n\n    vm.addRelation = function() {\n        vm.relations().push(vm.fb.group({\n            relatedEntity: [ { entityType: 'ASSET', id: null }, [vm.validators.required] ],\n            relationType: [\"Asset\"],\n            direction: [{value: \"TO\", disabled: true}]\n        }));\n    };\n    \n    function addOldRelation() {\n        vm.oldRelations().push(vm.fb.group({\n            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n            relationType: [{value: \"Asset\", disabled: true}, [vm.validators.required]],\n            direction: [{value: null, disabled: true}, [vm.validators.required]]\n        }));\n    }\n\n    vm.removeRelation = function(index) {\n        vm.relations().removeAt(index);\n        vm.relations().markAsDirty();\n    };\n\n    vm.removeOldRelation = function(index, relation) {\n        vm.oldRelations().removeAt(index);\n        vm.relationsToDelete.push(relation);\n        vm.oldRelations().markAsDirty();\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveRelations(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n    function getEntityRelations(relations) {\n        let relationsFrom = relations[0];\n        let relationsTo = relations[1];\n        for (let i=0; i < relationsFrom.length; i++) {\n            let relation = {\n                direction: 'FROM',\n                relationType: relationsFrom[i].type,\n                relatedEntity: relationsFrom[i].to\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n        for (let i=0; i < relationsTo.length; i++) {\n            let relation = {\n                direction: 'TO',\n                relationType: relationsTo[i].type,\n                relatedEntity: relationsTo[i].from\n            };\n            vm.oldRelationsData.push(relation);\n            addOldRelation();\n        }\n    }\n    \n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            entityRelationService.findInfoByFrom(entityId),\n            entityRelationService.findInfoByTo(entityId),\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n            entityService.getEntity(entityId.entityType, entityId.id)\n        ]).subscribe(\n            function (data) {\n                getEntityRelations(data.slice(0,2));\n                getEntityAttributes(data[2]);\n                vm.entity = data[3];\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entity.name,\n                    entityType: vm.entityType,\n                    entityLabel: vm.entity.label,\n                    type: vm.entity.type,\n                    attributes: vm.attributes,\n                    oldRelations: vm.oldRelationsData\n                }, {emitEvent: false});\n    \n                vm.addRelation();\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        if (vm.entity.label !== formValues.entityLabel){\n            vm.entity.label = formValues.entityLabel;\n            if (formValues.entityType == 'ASSET') {\n                return assetService.saveAsset(vm.entity);\n            } else if (formValues.entityType == 'DEVICE') {\n                return deviceService.saveDevice(vm.entity);\n            }\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveRelations(entityId) {\n        let relations = vm.editEntityFormGroup.get('relations').value;\n        let tasks = [];\n        for(let i=0; i < relations.length; i++) {\n            let relation = {\n                type: relations[i].relationType,\n                typeGroup: 'COMMON'\n            };\n            if (relations[i].direction == 'FROM') {\n                relation.to = relations[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = relations[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.saveRelation(relation));\n        }\n        for (let i=0; i < vm.relationsToDelete.length; i++) {\n            let relation = {\n                type: vm.relationsToDelete[i].relationType\n            };\n            if (vm.relationsToDelete[i].direction == 'FROM') {\n                relation.to = vm.relationsToDelete[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = vm.relationsToDelete[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n        }\n        if (tasks.length > 0) {\n            return widgetContext.rxjs.forkJoin(tasks);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a055fd6a-16a7-24ed-010b-703cd3604eb5"
              }, {
                "name" : "user",
                "icon" : "warning",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form [formGroup]=\"editDeviceFormGroup\" (ngSubmit)=\"save()\" class=\"al-form\">\r\n  <mat-toolbar color=\"primary\">\r\n    <h2>Edit Thermostat</h2>\r\n    <span fxFlex></span>\r\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n      <mat-icon class=\"material-icons\">close</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n\r\n  <mat-dialog-content>\r\n    <mat-form-field appearance=\"fill\" class=\"mat-block\">\r\n      <mat-label>Device Name</mat-label>\r\n      <input matInput formControlName=\"name\" required>\r\n      <mat-error *ngIf=\"editDeviceFormGroup.get('name').hasError('required')\">\r\n        Name is required\r\n      </mat-error>\r\n    </mat-form-field>\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <button mat-button color=\"primary\" type=\"button\" (click)=\"cancel()\">Cancel</button>\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"editDeviceFormGroup.invalid\">Save</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n",
                "customCss" : ".al-form {\n    width: 840px;\n}\n\n.al-form .mat-mdc-dialog-content {\n    max-height: 80vh;\n}\n\n.al-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.al-form .mat-mdc-button.mat-primary:not(:disabled), .al-form .mat-mdc-icon-button.mat-primary:not(:disabled), .al-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #4B535B;\n}\n\n.al-form .mat-mdc-fab.mat-primary:not(:disabled), .al-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .al-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .al-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.al-form .mat-mdc-fab.mat-primary:not(:disabled), .al-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .al-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .al-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .al-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .al-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .al-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #4B535B;\n}\n\n.al-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #3E3AE3 !important;\n}\n\n.al-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background-color: rgba(111, 116, 242, 0.54) !important;\n}\n\n\n.al-form .mat-icon {\n    color: #9FA6B4;\n}\n\n.al-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #9FA6B4;\n    padding-bottom: 8px;\n}\n\n.al-form .mat-button-toggle-group-appearance-standard, .al-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.al-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.al-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.al-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.al-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.al-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.al-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #4B535B;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.al-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.al-form .mat-mdc-slider .mdc-slider__value-indicator,\n.al-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #3E3AE3;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.al-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.al-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.al-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #3E3AE3;\n}\n\n\n.al-form .al-section-title {\n    width: 140px;\n    padding: 20px 0px;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 18px;\n    color: #29313C;\n}\n\n.al-form .mdc-text-field--filled:not(.mdc-text-field--disabled) {\n    background: #F3F6FA;\n}\n\n.al-form .mdc-text-field--filled {\n    border-radius: 6px 6px 0px 0px;\n}\n\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\r\n\r\nopenEditDeviceDialog();\r\n\r\nfunction openEditDeviceDialog() {\r\n    customDialog.customDialog(deviceTemplate, EditDeviceDialogController).subscribe();\r\n}\r\n\r\nfunction EditDeviceDialogController(instance) {\r\n    let vm = instance;\r\n    vm.widgetContext = widgetContext;\r\n\r\n    vm.device = null;\r\n\r\n    vm.editDeviceFormGroup = vm.fb.group({\r\n        name: ['', [vm.validators.required]]\r\n    });\r\n\r\n    vm.cancel = function() {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    vm.save = function() {\r\n        const formValues = vm.editDeviceFormGroup.value;\r\n        vm.device.name = formValues.name;\r\n        deviceService.saveDevice(vm.device).subscribe(() => {\r\n            widgetContext.updateAliases();\r\n            vm.dialogRef.close(null);\r\n        });\r\n    };\r\n\r\n    loadDevice();\r\n\r\n    function loadDevice() {\r\n        // 1. Ambil current user\r\n        let userId = widgetContext.ctx.currentUser.userId;\r\n\r\n        // 2. Cari device Thermostat yang punya relasi ke user\r\n        let query = {\r\n            parameters: {\r\n                rootId: userId.id,\r\n                rootType: userId.entityType,\r\n                direction: 'FROM',\r\n                maxLevel: 1\r\n            },\r\n            relationType: 'User', // sesuaikan relasi Anda\r\n            deviceTypes: ['thermostat']\r\n        };\r\n\r\n        entityRelationService.findByQuery(query).subscribe((devices) => {\r\n            if (devices.length) {\r\n                vm.device = devices[0]; // ambil device pertama\r\n                vm.editDeviceFormGroup.get('name').patchValue(vm.device.name, { emitEvent: false });\r\n            }\r\n        });\r\n    }\r\n}\r\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "c51e7390-4099-50ab-4055-4c01292f5523"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "3345cc85-1b48-a181-4b11-4c1ac35db68b"
        },
        "b67e2146-32ba-584b-17b1-4ab19a863939" : {
          "typeFullFqn" : "system.cards.html_value_card",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "6bf9e390-cbb1-bee9-6a55-0ba25d0f8a40",
              "dataKeys" : [ {
                "name" : "userId",
                "type" : "attribute",
                "label" : "userId",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.7578133930427007
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1750231856461,
                  "endTimeMs" : 1750318256461
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\" />\r\n    <link rel=\"stylesheet\" href=\"style.css\" />\r\n</head>\r\n\r\n<body>\r\n    <div class=\"card\">\r\n        <button id=\"startBtn\" onclick=\"fetchRelations()\">Assign Devices</button>\r\n\r\n        <!-- Dropdown + Save sejajar -->\r\n        <div id=\"dropdown_container\" class=\"dropdown-row\"></div>\r\n    </div>\r\n\r\n    <script>\r\n        const userId = \"531429a0-2fae-11ef-8438-43038932f97c\"; // permanent\r\n        let tokenGlobal = \"\";\r\n        let groupedGlobal = {};\r\n\r\n        async function fetchRelations() {\r\n            try {\r\n                // Login\r\n                const loginResp = await fetch('https://selin.solu.co.id:8700/api/auth/login', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        username: \"demo@solu.co.id\",\r\n                        password: \"5bHncB3qLkKzbWWkpFJMTX2NGQu8Qm\"\r\n                    })\r\n                });\r\n                if (!loginResp.ok) throw new Error(\"Login gagal\");\r\n                const { token } = await loginResp.json();\r\n                tokenGlobal = token;\r\n\r\n                // Fetch relations\r\n                const url = \"https://selin.solu.co.id:8700/api/relations/info?fromId=\" + userId + \"&fromType=USER\";\r\n                const resp = await fetch(url, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': \"Bearer \" + token\r\n                    }\r\n                });\r\n                if (!resp.ok) throw new Error(\"Gagal fetch relations\");\r\n                const data = await resp.json();\r\n\r\n                // Grouping\r\n                const grouped = {};\r\n                data.forEach(item => {\r\n                    const entityType = item.to.entityType;\r\n                    const toName = item.toName || \"-\";\r\n                    const toId = item.to.id;\r\n\r\n                    if (!grouped[entityType]) grouped[entityType] = {};\r\n                    grouped[entityType][toName] = toId;\r\n                });\r\n\r\n                groupedGlobal = grouped;\r\n                renderDropdowns(grouped);\r\n\r\n            } catch (error) {\r\n                console.error(\"❌ Error:\", error);\r\n                document.getElementById(\"dropdown_container\").innerHTML =\r\n                    `<p style=\"color:red\">Error: ${error.message}</p>`;\r\n            }\r\n        }\r\n\r\n        function renderDropdowns(grouped) {\r\n            const container = document.getElementById(\"dropdown_container\");\r\n            container.innerHTML = \"\";\r\n\r\n            const labels = {\r\n                \"DEVICE\": \"DEVICE\",\r\n                \"ASSET\": \"ROOM\"\r\n            };\r\n\r\n            Object.keys(labels).forEach(type => {\r\n                if (!grouped[type]) return;\r\n\r\n                const wrapper = document.createElement(\"div\");\r\n                wrapper.className = \"form-group\";\r\n\r\n                const label = document.createElement(\"label\");\r\n                label.textContent = labels[type];\r\n\r\n                const select = document.createElement(\"select\");\r\n                select.id = type + \"_dropdown\";\r\n                select.onchange = updateRelationBody;\r\n\r\n                // Placeholder\r\n                const placeholder = document.createElement(\"option\");\r\n                placeholder.value = \"\";\r\n                placeholder.textContent = \"-- Choose --\";\r\n                placeholder.disabled = true;\r\n                placeholder.selected = true;\r\n                select.appendChild(placeholder);\r\n\r\n                Object.entries(grouped[type]).forEach(([name, id]) => {\r\n                    const option = document.createElement(\"option\");\r\n                    option.value = id;\r\n                    option.textContent = name;\r\n                    select.appendChild(option);\r\n                });\r\n\r\n                wrapper.appendChild(label);\r\n                wrapper.appendChild(select);\r\n                container.appendChild(wrapper);\r\n            });\r\n\r\n            // tambahkan tombol Save di akhir baris\r\n            const saveBtn = document.createElement(\"button\");\r\n            saveBtn.id = \"submitBtn\";\r\n            saveBtn.textContent = \"Save\";\r\n            saveBtn.style.display = \"none\";\r\n            saveBtn.onclick = submitRelation;\r\n            container.appendChild(saveBtn);\r\n        }\r\n\r\n        function updateRelationBody() {\r\n            const deviceId = document.getElementById(\"DEVICE_dropdown\")?.value;\r\n            const assetId = document.getElementById(\"ASSET_dropdown\")?.value;\r\n\r\n            if (deviceId && assetId) {\r\n                document.getElementById(\"submitBtn\").style.display = \"inline-block\";\r\n            } else {\r\n                document.getElementById(\"submitBtn\").style.display = \"none\";\r\n            }\r\n        }\r\n\r\n        async function submitRelation() {\r\n            const deviceId = document.getElementById(\"DEVICE_dropdown\").value;\r\n            const assetId = document.getElementById(\"ASSET_dropdown\").value;\r\n\r\n            const body = {\r\n                to: { id: deviceId, entityType: \"DEVICE\" },\r\n                from: { id: assetId, entityType: \"ASSET\" },\r\n                type: \"Asset\"\r\n            };\r\n\r\n            try {\r\n                const resp = await fetch(\"https://selin.solu.co.id:8700/api/relation\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer \" + tokenGlobal\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                });\r\n\r\n                if (!resp.ok) throw new Error(\"Gagal submit relation\");\r\n\r\n                alert(\"✅ Relation berhasil dibuat\");\r\n            } catch (error) {\r\n                alert(\"❌ Error: \" + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>\r\n",
              "cardCss" : "body {\r\n    font-family: \"Segoe UI\", Arial, sans-serif;\r\n    background: #f4f6f9;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    min-height: 100vh;\r\n    margin: 0;\r\n    padding: 40px 0;\r\n}\r\n\r\n.card {\r\n    background: #fff;\r\n    padding: 25px 30px;\r\n    border-radius: 12px;\r\n    width: 700px;\r\n    text-align: center;\r\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n#startBtn {\r\n    padding: 12px 24px;\r\n    font-size: 16px;\r\n    border: none;\r\n    border-radius: 8px;\r\n    background: #0078d4;\r\n    color: white;\r\n    cursor: pointer;\r\n    margin-bottom: 20px;\r\n    transition: 0.3s;\r\n}\r\n#startBtn:hover { background: #005fa3; }\r\n\r\n.dropdown-row {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end; /* biar sejajar */\r\n    gap: 20px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: left;\r\n}\r\n\r\n.form-group label {\r\n    margin-bottom: 6px;\r\n    font-weight: bold;\r\n    color: #444;\r\n}\r\n\r\n.form-group select {\r\n    width: 100%;\r\n    padding: 12px;\r\n    font-size: 15px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 10px;\r\n    background: linear-gradient(135deg, #8e2de2, #4a00e0);\r\n    color: #fff;\r\n    cursor: pointer;\r\n    appearance: none;\r\n}\r\n.form-group select option {\r\n    background: #4a00e0;\r\n    color: #fff;  /* sama dengan warna saat pilih */\r\n}\r\n\r\n#submitBtn {\r\n    padding: 12px 22px;\r\n    font-size: 15px;\r\n    background: #28a745;\r\n    border: none;\r\n    border-radius: 8px;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n}\r\n#submitBtn:hover { background: #1e7e34; }\r\n"
            },
            "title" : "HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ ],
              "headerButton" : [ ]
            },
            "displayTimewindow" : true,
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "b67e2146-32ba-584b-17b1-4ab19a863939"
        }
      },
      "states" : {
        "default" : {
          "name" : "shellly",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "eaa1a76a-7afb-2ea4-d584-8fbb4d8836df" : {
                  "sizeX" : 7,
                  "sizeY" : 9,
                  "row" : 0,
                  "col" : 0
                },
                "3345cc85-1b48-a181-4b11-4c1ac35db68b" : {
                  "sizeX" : 6,
                  "sizeY" : 9,
                  "row" : 0,
                  "col" : 7
                },
                "b67e2146-32ba-584b-17b1-4ab19a863939" : {
                  "sizeX" : 10,
                  "sizeY" : 12,
                  "row" : 0,
                  "col" : 13
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "layoutType" : "default"
              }
            }
          }
        },
        "current_device" : {
          "name" : "current_device",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "0feb893f-e24f-3092-37ff-24af73320f34" : {
                  "sizeX" : 7,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "layoutType" : "default",
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        },
        "list_room" : {
          "name" : "list_room",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : { },
              "gridSettings" : {
                "layoutType" : "default",
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "c8e1fea6-c90b-625f-b0a9-334b850ed915" : {
          "id" : "c8e1fea6-c90b-625f-b0a9-334b850ed915",
          "alias" : "device type",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : null,
            "defaultStateEntity" : {
              "entityType" : "CURRENT_USER",
              "id" : "13814000-1dd2-11b2-8080-808080808080"
            },
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : null,
            "fetchLastLevelOnly" : false,
            "relationType" : "User",
            "deviceTypes" : [ "thermostat" ]
          }
        },
        "0cf2a65b-ec3a-1fd3-c4a5-d9192b64284f" : {
          "id" : "0cf2a65b-ec3a-1fd3-c4a5-d9192b64284f",
          "alias" : "current device",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        },
        "be46c070-444f-c6d5-b6c0-a7f1b76e0e2a" : {
          "id" : "be46c070-444f-c6d5-b6c0-a7f1b76e0e2a",
          "alias" : "current user",
          "filter" : {
            "type" : "relationsQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : null,
            "defaultStateEntity" : {
              "entityType" : "CURRENT_CUSTOMER",
              "id" : "7304ef60-2fa4-11ef-8438-43038932f97c"
            },
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : null,
            "fetchLastLevelOnly" : false,
            "filters" : [ {
              "relationType" : "Customer",
              "entityTypes" : [ "USER" ],
              "negate" : false
            } ]
          }
        },
        "a751d70e-5817-02e8-4227-2457bbcfe172" : {
          "id" : "a751d70e-5817-02e8-4227-2457bbcfe172",
          "alias" : "list device",
          "filter" : {
            "type" : "deviceType",
            "resolveMultiple" : true,
            "deviceTypes" : [ "thermostat" ],
            "deviceNameFilter" : ""
          }
        },
        "6d8efa56-9a7a-2ca4-edfb-1dbb0731957d" : {
          "id" : "6d8efa56-9a7a-2ca4-edfb-1dbb0731957d",
          "alias" : "list asset",
          "filter" : {
            "type" : "assetSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : {
              "entityType" : "CURRENT_USER",
              "id" : "13814000-1dd2-11b2-8080-808080808080"
            },
            "direction" : "FROM",
            "maxLevel" : null,
            "fetchLastLevelOnly" : false,
            "relationType" : "Asset",
            "assetTypes" : [ "LANTAI" ]
          }
        },
        "6bf9e390-cbb1-bee9-6a55-0ba25d0f8a40" : {
          "id" : "6bf9e390-cbb1-bee9-6a55-0ba25d0f8a40",
          "alias" : "current user1",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "USER",
              "id" : "531429a0-2fae-11ef-8438-43038932f97c"
            }
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1730621950407,
            "endTimeMs" : 1730708350407
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "name" : "shellly",
    "resources" : null,
    "assignedCustomers" : null,
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "76b0f090-9a85-11ef-8268-b3103611f169"
    },
    "ownerId" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}